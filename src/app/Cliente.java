package app;

import uweb.language.ErrorAnalisis;
import uweb.language.Sintactico;
import uweb.language.Lexico;
import app.tree.*;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import uweb.language.Simbolo;
import uweb.language.SymbolAnalisis;

/**
 *
 * @author ozmarescobar
 */
public class Cliente extends javax.swing.JFrame
{

    /**
     * Creates new form Cliente
     */
    final String title;
    String fileName;
    String textoOriginal;
    
    final JFileChooser fileChooser;
    File currentFile;

    public Cliente()
    {
        initComponents();
        fileChooser = new JFileChooser(System.getProperty("user.home") + "/Desktop/");
        fileChooser.setFileFilter(new FileNameExtensionFilter("uweb Language File", "uweb"));
        title = "Proyecto 1, 201602988 - ";
        fileName = "Untitled.uweb";
        setTitle(title + fileName);
        
        textoOriginal = "";
        currentFile = null;
        
        DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
        leftRenderer.setHorizontalAlignment(JLabel.CENTER);
        tablaVariables.setDefaultRenderer(String.class, leftRenderer);
        try
        {
            inicializarDirectorios();
        } catch (IOException ex)
        {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        tabsParte1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaCodigo = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        bVerTokens = new javax.swing.JButton();
        bVerHTML = new javax.swing.JButton();
        bVerErrores = new javax.swing.JButton();
        tabsParte2 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaConsola = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaVariables = new javax.swing.JTable();
        barraMenu = new javax.swing.JMenuBar();
        bMenuArchivo = new javax.swing.JMenu();
        bMenuNuevo = new javax.swing.JMenuItem();
        bMenuAbrir = new javax.swing.JMenuItem();
        bMenuGuardar = new javax.swing.JMenuItem();
        bMenuGuardarComo = new javax.swing.JMenuItem();
        mSeparador1 = new javax.swing.JPopupMenu.Separator();
        bMenuCompilar = new javax.swing.JMenuItem();
        bMenuLimpiarConsola = new javax.swing.JMenuItem();
        bMenuLimpiarVariables = new javax.swing.JMenuItem();
        mSeparador2 = new javax.swing.JPopupMenu.Separator();
        bMenuSalir = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        bMenuMUsuario = new javax.swing.JMenuItem();
        bMenuMTecnico = new javax.swing.JMenuItem();
        bMenuAcercaDe = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("[OLC1]Proyecto1");

        textAreaCodigo.setColumns(20);
        textAreaCodigo.setFont(new java.awt.Font("Ubuntu Mono", 0, 24)); // NOI18N
        textAreaCodigo.setRows(5);
        textAreaCodigo.setTabSize(4);
        jScrollPane1.setViewportView(textAreaCodigo);

        tabsParte1.addTab("Edición", jScrollPane1);

        bVerTokens.setText("Reporte de Tokens");
        bVerTokens.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bVerTokensActionPerformed(evt);
            }
        });

        bVerHTML.setText("Ver página HTML");
        bVerHTML.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bVerHTMLActionPerformed(evt);
            }
        });

        bVerErrores.setText("Ver Errores Léxicos y Sintácticos");
        bVerErrores.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bVerErroresActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(153, 153, 153)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(bVerHTML, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bVerTokens, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 172, Short.MAX_VALUE)
                .addComponent(bVerErrores, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(152, 152, 152))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(bVerHTML, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bVerTokens, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(bVerErrores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        tabsParte1.addTab("Resultados", jPanel1);

        textAreaConsola.setEditable(false);
        textAreaConsola.setColumns(20);
        textAreaConsola.setFont(new java.awt.Font("Ubuntu Mono", 0, 24)); // NOI18N
        textAreaConsola.setRows(5);
        jScrollPane2.setViewportView(textAreaConsola);

        tabsParte2.addTab("Consola", jScrollPane2);

        tablaVariables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Identificador", "Tipo", "Valor", "Fila", "Columna"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        tablaVariables.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tablaVariables);

        tabsParte2.addTab("Variables", jScrollPane3);

        bMenuArchivo.setText("Archivo");

        bMenuNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        bMenuNuevo.setText("Nuevo");
        bMenuNuevo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bMenuNuevoActionPerformed(evt);
            }
        });
        bMenuArchivo.add(bMenuNuevo);

        bMenuAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        bMenuAbrir.setText("Abrir");
        bMenuAbrir.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bMenuAbrirActionPerformed(evt);
            }
        });
        bMenuArchivo.add(bMenuAbrir);

        bMenuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        bMenuGuardar.setText("Guardar");
        bMenuGuardar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bMenuGuardarActionPerformed(evt);
            }
        });
        bMenuArchivo.add(bMenuGuardar);

        bMenuGuardarComo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        bMenuGuardarComo.setText("Guardar Como...");
        bMenuGuardarComo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bMenuGuardarComoActionPerformed(evt);
            }
        });
        bMenuArchivo.add(bMenuGuardarComo);
        bMenuArchivo.add(mSeparador1);

        bMenuCompilar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        bMenuCompilar.setText("Compilar");
        bMenuCompilar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bMenuCompilarActionPerformed(evt);
            }
        });
        bMenuArchivo.add(bMenuCompilar);

        bMenuLimpiarConsola.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        bMenuLimpiarConsola.setText("Limpiar Consola");
        bMenuLimpiarConsola.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bMenuLimpiarConsolaActionPerformed(evt);
            }
        });
        bMenuArchivo.add(bMenuLimpiarConsola);

        bMenuLimpiarVariables.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        bMenuLimpiarVariables.setText("Limpiar Variables");
        bMenuLimpiarVariables.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bMenuLimpiarVariablesActionPerformed(evt);
            }
        });
        bMenuArchivo.add(bMenuLimpiarVariables);
        bMenuArchivo.add(mSeparador2);

        bMenuSalir.setText("Salir");
        bMenuSalir.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bMenuSalirActionPerformed(evt);
            }
        });
        bMenuArchivo.add(bMenuSalir);

        barraMenu.add(bMenuArchivo);

        jMenu1.setText("Ayuda");

        bMenuMUsuario.setText("Manual de Usuario");
        bMenuMUsuario.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bMenuMUsuarioActionPerformed(evt);
            }
        });
        jMenu1.add(bMenuMUsuario);

        bMenuMTecnico.setText("Manual Técnico");
        bMenuMTecnico.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bMenuMTecnicoActionPerformed(evt);
            }
        });
        jMenu1.add(bMenuMTecnico);

        bMenuAcercaDe.setText("Acerca de...");
        bMenuAcercaDe.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bMenuAcercaDeActionPerformed(evt);
            }
        });
        jMenu1.add(bMenuAcercaDe);

        barraMenu.add(jMenu1);

        setJMenuBar(barraMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tabsParte2)
                    .addComponent(tabsParte1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabsParte1, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabsParte2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bMenuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMenuSalirActionPerformed
        String text = textAreaCodigo.getText();

        if (!textoOriginal.equals(text))
        {
            int code = JOptionPane.showConfirmDialog(this, "Desea guardar los cambios?\nSe perderán si no los guarda.", "Advertencia", JOptionPane.YES_NO_CANCEL_OPTION);
            if (code == JOptionPane.NO_OPTION)
            {
                System.exit(0);
            } else if (code == JOptionPane.YES_OPTION)
            {
                bMenuGuardarActionPerformed(evt);
                if(currentFile != null)
                    System.exit(0);
            }
        } else
        {
            System.exit(0);
        }
    }//GEN-LAST:event_bMenuSalirActionPerformed

    private void bMenuNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMenuNuevoActionPerformed
        String text = textAreaCodigo.getText();

        if (!textoOriginal.equals(text))
        {
            int code = JOptionPane.showConfirmDialog(this, "Desea guardar los cambios?", "Advertencia", JOptionPane.YES_NO_CANCEL_OPTION);
            if (code == JOptionPane.NO_OPTION)
            {
                textoOriginal = "";
                textAreaCodigo.setText(textoOriginal);
                fileName = "Untitled.uweb";
                currentFile = null;
                setTitle(title + fileName);
            } else if (code == JOptionPane.YES_OPTION)
            {
                bMenuGuardarActionPerformed(evt);
                if(currentFile != null)
                {
                    textoOriginal = "";
                    textAreaCodigo.setText(textoOriginal);
                    fileName = "Untitled.uweb";
                    currentFile = null;
                    setTitle(title + fileName);
                }
            }
        } else
        {
            textoOriginal = "";
            textAreaCodigo.setText(textoOriginal);
            fileName = "Untitled.uweb";
            currentFile = null;
            setTitle(title + fileName);
        }
    }//GEN-LAST:event_bMenuNuevoActionPerformed

    private void bMenuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMenuAbrirActionPerformed
        String text = textAreaCodigo.getText();

        if (!textoOriginal.equals(text))
        {
            int code = JOptionPane.showConfirmDialog(this, "Desea guardar los cambios?", "Advertencia", JOptionPane.YES_NO_CANCEL_OPTION);

            if (code == JOptionPane.CANCEL_OPTION)
            {
                return;
            } else if (code == JOptionPane.YES_OPTION)
            {
                bMenuGuardarActionPerformed(evt);
            }
        }

        fileChooser.setDialogTitle("Abrir archivo.");

        int opcion = fileChooser.showOpenDialog(this);

        if (opcion == JFileChooser.APPROVE_OPTION)
        {
            currentFile = fileChooser.getSelectedFile();
            try (BufferedReader br = new BufferedReader(new FileReader(currentFile)))
            {
                text = "";
                while (br.ready())
                {
                    text += br.readLine() + "\n";
                }
                textoOriginal = text;
                textAreaCodigo.setText(textoOriginal);
                fileName = currentFile.getName();
                setTitle(title + fileName);
            } catch (IOException ex)
            {
                Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_bMenuAbrirActionPerformed

    private void bMenuGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMenuGuardarComoActionPerformed
        String text = textAreaCodigo.getText();
        fileChooser.setDialogTitle("Guardar como...");

        int opcion = fileChooser.showSaveDialog(this);

        if (opcion == JFileChooser.APPROVE_OPTION)
        {
            currentFile = fileChooser.getSelectedFile();

            try
            {
                String path = currentFile.getCanonicalPath().replaceAll(".uweb","") + ".uweb";
                currentFile = Tool.crearArchivo(text, path);
                textoOriginal = text;
                fileName = currentFile.getName();
                setTitle(title + fileName);
            } catch (IOException ex)
            {
                Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_bMenuGuardarComoActionPerformed

    private void bMenuGuardarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bMenuGuardarActionPerformed
    {//GEN-HEADEREND:event_bMenuGuardarActionPerformed
        if(currentFile == null)
        {
            bMenuGuardarComoActionPerformed(evt);
        }
        else
        {
            String text = textAreaCodigo.getText();
            try
            {
                String path = currentFile.getCanonicalPath();
                Tool.crearArchivo(text, path);
                textoOriginal = text;
                fileName = currentFile.getName();
                setTitle(title + fileName);
            } catch (IOException ex)
            {
                Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_bMenuGuardarActionPerformed

    private void bMenuCompilarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bMenuCompilarActionPerformed
    {//GEN-HEADEREND:event_bMenuCompilarActionPerformed
        String text = textAreaCodigo.getText().replaceAll("”", "\"").replaceAll("“", "\"").replaceAll("\r", "").replaceAll("\f", "");
        textAreaCodigo.setText(text);
        if (text.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Entrada vacia.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Lexico scanner = new Lexico(new StringReader(text));
        Sintactico parser = new Sintactico(scanner);

        try
        {
            parser.parse();

            ejecutar(scanner, parser);
        } catch (Exception ex)
        {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bMenuCompilarActionPerformed

    private void bMenuAcercaDeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bMenuAcercaDeActionPerformed
    {//GEN-HEADEREND:event_bMenuAcercaDeActionPerformed
        JOptionPane.showMessageDialog(this, "Estudiante: Ozmar René Escobar Avila\nCarné: 201602988", "Acerca De", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_bMenuAcercaDeActionPerformed

    private void bMenuMTecnicoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bMenuMTecnicoActionPerformed
    {//GEN-HEADEREND:event_bMenuMTecnicoActionPerformed
        try
        {
            File file = new File("./Manual_Tecnico.pdf");
            if (!file.exists())
            {
                JOptionPane.showMessageDialog(null, "No hay manual técnico.", "Mensaje", JOptionPane.ERROR_MESSAGE);
            } else
            {
                Desktop.getDesktop().open(file);
            }
        } catch (IOException ex)
        {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bMenuMTecnicoActionPerformed

    private void bMenuMUsuarioActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bMenuMUsuarioActionPerformed
    {//GEN-HEADEREND:event_bMenuMUsuarioActionPerformed
        try
        {
            File file = new File("./Manual_Usuario.pdf");
            if (!file.exists())
            {
                JOptionPane.showMessageDialog(null, "No hay manual del usuario final.", "Mensaje", JOptionPane.ERROR_MESSAGE);
            } else
            {
                Desktop.getDesktop().open(file);
            }
        } catch (IOException ex)
        {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bMenuMUsuarioActionPerformed

    private void bVerErroresActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bVerErroresActionPerformed
    {//GEN-HEADEREND:event_bVerErroresActionPerformed
        try
        {
            File file = new File("./Reportes/errores.html");
            if (!file.exists())
            {
                JOptionPane.showMessageDialog(null, "No hay errores o no se ha ejecutado un análisis.", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
            } else
            {
                Desktop.getDesktop().open(file);
            }
        } catch (IOException ex)
        {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bVerErroresActionPerformed

    private void bVerHTMLActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bVerHTMLActionPerformed
    {//GEN-HEADEREND:event_bVerHTMLActionPerformed
        try
        {
            File file = new File("./Reportes/ResultadoHTML.html");
            if (!file.exists())
            {
                JOptionPane.showMessageDialog(null, "No se ha ejecutado un análisis correcto.", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
            } else
            {
                Desktop.getDesktop().open(file);
            }
        } catch (IOException ex)
        {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bVerHTMLActionPerformed

    private void bVerTokensActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bVerTokensActionPerformed
    {//GEN-HEADEREND:event_bVerTokensActionPerformed
        try
        {
            File file = new File("./Reportes/AnalisisLexico.html");
            if (!file.exists())
            {
                JOptionPane.showMessageDialog(null, "No se ha ejecutado un análisis.", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
            } else
            {
                Desktop.getDesktop().open(file);
            }
        } catch (IOException ex)
        {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bVerTokensActionPerformed

    private void bMenuLimpiarConsolaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bMenuLimpiarConsolaActionPerformed
    {//GEN-HEADEREND:event_bMenuLimpiarConsolaActionPerformed
        textAreaConsola.setText("");
    }//GEN-LAST:event_bMenuLimpiarConsolaActionPerformed

    private void bMenuLimpiarVariablesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bMenuLimpiarVariablesActionPerformed
    {//GEN-HEADEREND:event_bMenuLimpiarVariablesActionPerformed
        DefaultTableModel dtm = (DefaultTableModel) tablaVariables.getModel();
        dtm.setRowCount(0);
        tablaVariables.setModel(dtm);
    }//GEN-LAST:event_bMenuLimpiarVariablesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if (info.getName().equals("GTK+"))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() ->
        {
            new Cliente().setVisible(true);
        });
    }

    private void ejecutar(Lexico scanner, Sintactico parser)
    {
        crearResultadoLexico(scanner);
        crearReporteErrores(scanner,parser);
        //System.out.println("s:" + scanner.errores.size() + ", p:" + parser.errores.size());
        if (scanner.errores.size() > 0 || parser.errores.size() > 0)
        {
            JOptionPane.showMessageDialog(null, "Errores léxicos o sintácticos", "Advertencia", JOptionPane.ERROR_MESSAGE);
        } 
        else
        {
            //boolean errorSemantico = false;
            uweb.language.Contexto globales = new uweb.language.Contexto();
            String text = "";
            Object res = parser.AST.ejecutar(globales, textAreaConsola);
            if(res != null)
            {
                text += res.toString();
            }
            
            DefaultTableModel dtm = (DefaultTableModel) tablaVariables.getModel();
            dtm.setRowCount(0);
            for (Simbolo s : globales)
            {
                SymbolAnalisis simboloDelLexico = findSymbol(scanner.simbolos,s.id);
                if(simboloDelLexico != null)
                {
                    dtm.addRow(new Object[]{s.id,s.tipo,s.value,simboloDelLexico.linea.toString(),simboloDelLexico.columna.toString()});
                }
            }
            tablaVariables.setModel(dtm);
            try
            {
                Tool.crearArchivo(text,"./Reportes/ResultadoHTML.html");
                JOptionPane.showMessageDialog(null, "Análisis realizados correctamente", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex)
            {
                Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private SymbolAnalisis findSymbol(LinkedList<SymbolAnalisis> simbolos, String id)
    {
        for (SymbolAnalisis s : simbolos)
        {
            if(s.token.equals(id))
            {
                return s;
            }
        }
        return null; 
    }
    
    private void crearResultadoLexico(Lexico scanner)
    {
         String document = ""
                    + "<!DOCTYPE html>\n"
                    + "<hml>\n"
                    + "\t<head>\n"
                    + "\t\t<meta charset=\"UTF-8\">\n"
                    + "\t\t<title>Reporte de Tokens</title>\n"
                    + "\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n"
                    + "\t</head>\n";

            String body = ""
                    + "\t<body>\n"
                    + "\t\t<center>\n";

            body += "\t\t\t<h1>Análisis Léxico</h1>\n";
            if (scanner != null && !scanner.simbolos.isEmpty())
            {
                body += "\t\t\t<table border=\"1\">\n";
                body += "\t\t\t\t<tr>\n";
                body += "\t\t\t\t\t<th>Tipo</th>\n";
                body += "\t\t\t\t\t<th>Lexema</th>\n";
                body += "\t\t\t\t\t<th>Fila</th>\n";
                body += "\t\t\t\t\t<th>Columna</th>\n";
                body += "\t\t\t\t</tr>\n";
                for (SymbolAnalisis s : scanner.simbolos)
                {
                    body += "\t\t\t\t<tr>\n";
                    body += s.toString();
                    body += "\t\t\t\t</tr>\n";
                }
                body += "\t\t\t</table>\n";
            } else
            {
                body += "\t\t\t\t<br>No hay tokens\n";
            }
            body += ""
                    + "\t\t</center>\n"
                    + "\t</body>\n";
            document += body + "</html>";

            try
            {
                Tool.crearArchivo(document, "./Reportes/AnalisisLexico.html");
            } catch (IOException e)
            {
                Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, e);
            }
    }
    
    private void crearReporteErrores(Lexico scanner, Sintactico parser)
    {
            String document = ""
                    + "<!DOCTYPE html>\n"
                    + "<hml>\n"
                    + "\t<head>\n"
                    + "\t\t<meta charset=\"UTF-8\">\n"
                    + "\t\t<title>Errores Léxicos y Sintácticos</title>\n"
                    + "\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n"
                    + "\t</head>\n";

            String body = ""
                    + "\t<body>\n"
                    + "\t\t<center>\n";

            body += "\t\t\t<h1>Errores Léxicos</h1>\n";
            if (!scanner.errores.isEmpty())
            {
                body += "\t\t\t<table border=\"1\">\n";
                body += "\t\t\t\t<tr>\n";
                body += "\t\t\t\t\t<th>Tipo</th>\n";
                body += "\t\t\t\t\t<th>Token</th>\n";
                body += "\t\t\t\t\t<th>Fila</th>\n";
                body += "\t\t\t\t\t<th>Columna</th>\n";
                body += "\t\t\t\t\t<th>Descripción</th>\n";
                body += "\t\t\t\t</tr>\n";
                for (ErrorAnalisis e : scanner.errores)
                {
                    body += "\t\t\t\t<tr>\n";
                    body += e.toString();
                    body += "\t\t\t\t</tr>\n";
                }
                body += "\t\t\t</table>\n";
            } else
            {
                body += "\t\t\t\tNo hay errores\n";
            }

            body += "\t\t\t<hr>\n";

            body += "\t\t\t<h1>Errores Sintácticos</h1>\n";
            if (!parser.errores.isEmpty())
            {
                body += "\t\t\t<table border=\"1\">\n";
                body += "\t\t\t\t<tr>\n";
                body += "\t\t\t\t\t<th>Tipo</th>\n";
                body += "\t\t\t\t\t<th>Token</th>\n";
                body += "\t\t\t\t\t<th>Fila</th>\n";
                body += "\t\t\t\t\t<th>Columna</th>\n";
                body += "\t\t\t\t\t<th>Descripción</th>\n";
                body += "\t\t\t\t</tr>\n";
                for (ErrorAnalisis e : parser.errores)
                {
                    body += "\t\t\t\t<tr>\n";
                    body += e.toString();
                    body += "\t\t\t\t</tr>\n";
                }
                body += "\t\t\t</table>\n";
            } else
            {
                body += "\t\t\t\tNo hay errores\n";
            }
            body += ""
                    + "\t\t</center>\n"
                    + "\t</body>\n";
            document += body + "</html>";

            try
            {
                Tool.crearArchivo(document, "./Reportes/errores.html");
            } catch (IOException e)
            {
                Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, e);
            }
    }
    
    private void inicializarDirectorios() throws IOException
    {
        Tool.crearDirectorio("./Reportes");
        String css = ""
                + "table, th, td\n"
                + "{\n"
                + "\tborder: 1px solid black;\n"
                + "}\n"
                + "\n"
                + "body\n"
                + "{\n"
                + "\tbackground-color:#d9d9d9;\n"
                + "}";

        Tool.crearArchivo(css, "./Reportes/style.css");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem bMenuAbrir;
    private javax.swing.JMenuItem bMenuAcercaDe;
    private javax.swing.JMenu bMenuArchivo;
    private javax.swing.JMenuItem bMenuCompilar;
    private javax.swing.JMenuItem bMenuGuardar;
    private javax.swing.JMenuItem bMenuGuardarComo;
    private javax.swing.JMenuItem bMenuLimpiarConsola;
    private javax.swing.JMenuItem bMenuLimpiarVariables;
    private javax.swing.JMenuItem bMenuMTecnico;
    private javax.swing.JMenuItem bMenuMUsuario;
    private javax.swing.JMenuItem bMenuNuevo;
    private javax.swing.JMenuItem bMenuSalir;
    private javax.swing.JButton bVerErrores;
    private javax.swing.JButton bVerHTML;
    private javax.swing.JButton bVerTokens;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator mSeparador1;
    private javax.swing.JPopupMenu.Separator mSeparador2;
    private javax.swing.JTable tablaVariables;
    private javax.swing.JTabbedPane tabsParte1;
    private javax.swing.JTabbedPane tabsParte2;
    private javax.swing.JTextArea textAreaCodigo;
    private javax.swing.JTextArea textAreaConsola;
    // End of variables declaration//GEN-END:variables
}
