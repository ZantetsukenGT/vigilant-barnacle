
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package uweb.language;

import java_cup.runtime.*;
import app.tree.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\002\011\000\002\002" +
    "\012\000\002\003\004\000\002\003\003\000\002\005\011" +
    "\000\002\005\012\000\002\005\011\000\002\005\012\000" +
    "\002\005\011\000\002\005\012\000\002\005\012\000\002" +
    "\005\013\000\002\005\011\000\002\005\012\000\002\005" +
    "\011\000\002\005\012\000\002\005\012\000\002\005\013" +
    "\000\002\005\006\000\002\005\012\000\002\005\012\000" +
    "\002\005\011\000\002\005\011\000\002\005\011\000\002" +
    "\005\012\000\002\005\011\000\002\005\012\000\002\005" +
    "\011\000\002\005\012\000\002\005\012\000\002\005\013" +
    "\000\002\005\011\000\002\005\012\000\002\005\011\000" +
    "\002\005\012\000\002\005\011\000\002\005\012\000\002" +
    "\005\005\000\002\005\006\000\002\005\003\000\002\005" +
    "\004\000\002\005\004\000\002\005\003\000\002\004\004" +
    "\000\002\004\003\000\002\006\005\000\002\006\007\000" +
    "\002\006\010\000\002\006\011\000\002\006\013\000\002" +
    "\006\014\000\002\006\014\000\002\006\015\000\002\006" +
    "\010\000\002\006\011\000\002\006\012\000\002\006\012" +
    "\000\002\006\012\000\002\006\012\000\002\006\012\000" +
    "\002\006\012\000\002\006\012\000\002\006\012\000\002" +
    "\006\012\000\002\006\012\000\002\006\012\000\002\006" +
    "\012\000\002\006\012\000\002\006\012\000\002\006\011" +
    "\000\002\006\004\000\002\006\004\000\002\007\007\000" +
    "\002\007\005\000\002\010\005\000\002\010\003\000\002" +
    "\011\004\000\002\011\003\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\004\000\002\012\005\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\004\000\002\012\003\000\002\012\003\000\002\012\010" +
    "\000\002\012\010\000\002\012\010\000\002\012\010\000" +
    "\002\012\010\000\002\012\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a2\000\004\106\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\107\010\001\002\000\010\003\012\106\013\121" +
    "\015\001\002\000\010\003\012\106\u01a1\121\015\001\002" +
    "\000\014\003\uffd6\067\u019f\106\uffd6\107\u01a0\121\uffd6\001" +
    "\002\000\040\005\023\006\033\007\020\010\030\012\016" +
    "\013\021\014\027\015\026\016\025\017\017\020\022\023" +
    "\032\024\034\025\024\120\031\001\002\000\010\003\ufffd" +
    "\106\ufffd\121\ufffd\001\002\000\010\003\uffd9\106\uffd9\121" +
    "\uffd9\001\002\000\024\021\104\022\101\026\110\027\111" +
    "\030\102\031\106\032\103\033\100\107\u018a\001\002\000" +
    "\004\107\u0180\001\002\000\024\021\104\022\101\026\110" +
    "\027\111\030\102\031\106\032\103\033\100\107\u016b\001" +
    "\002\000\024\021\104\022\101\026\110\027\111\030\102" +
    "\031\106\032\103\033\100\107\u0160\001\002\000\020\003" +
    "\250\034\244\037\246\041\245\067\251\070\252\071\247" +
    "\001\002\000\004\107\231\001\002\000\004\107\217\001" +
    "\002\000\024\021\104\022\101\026\110\027\111\030\102" +
    "\031\106\032\103\033\100\107\204\001\002\000\004\107" +
    "\172\001\002\000\004\107\160\001\002\000\024\021\104" +
    "\022\101\026\110\027\111\030\102\031\106\032\103\033" +
    "\100\107\107\001\002\000\006\004\076\011\041\001\002" +
    "\000\004\107\064\001\002\000\004\107\052\001\002\000" +
    "\004\107\035\001\002\000\010\003\012\106\037\121\015" +
    "\001\002\000\010\003\012\106\045\121\015\001\002\000" +
    "\040\005\023\006\033\007\020\010\030\012\016\013\021" +
    "\014\027\015\026\016\025\017\017\020\022\023\032\024" +
    "\034\025\024\120\040\001\002\000\006\011\041\024\042" +
    "\001\002\000\004\107\044\001\002\000\004\107\043\001" +
    "\002\000\010\003\uffdf\106\uffdf\121\uffdf\001\002\000\010" +
    "\003\uffee\106\uffee\121\uffee\001\002\000\040\005\023\006" +
    "\033\007\020\010\030\012\016\013\021\014\027\015\026" +
    "\016\025\017\017\020\022\023\032\024\034\025\024\120" +
    "\047\001\002\000\010\003\ufffe\106\ufffe\121\ufffe\001\002" +
    "\000\006\011\041\024\050\001\002\000\004\107\051\001" +
    "\002\000\010\003\uffde\106\uffde\121\uffde\001\002\000\010" +
    "\003\012\106\054\121\015\001\002\000\010\003\012\106" +
    "\060\121\015\001\002\000\040\005\023\006\033\007\020" +
    "\010\030\012\016\013\021\014\027\015\026\016\025\017" +
    "\017\020\022\023\032\024\034\025\024\120\055\001\002" +
    "\000\006\006\056\011\041\001\002\000\004\107\057\001" +
    "\002\000\010\003\ufffa\106\ufffa\121\ufffa\001\002\000\040" +
    "\005\023\006\033\007\020\010\030\012\016\013\021\014" +
    "\027\015\026\016\025\017\017\020\022\023\032\024\034" +
    "\025\024\120\061\001\002\000\006\006\062\011\041\001" +
    "\002\000\004\107\063\001\002\000\010\003\ufff9\106\ufff9" +
    "\121\ufff9\001\002\000\010\003\012\106\066\121\015\001" +
    "\002\000\010\003\012\106\072\121\015\001\002\000\040" +
    "\005\023\006\033\007\020\010\030\012\016\013\021\014" +
    "\027\015\026\016\025\017\017\020\022\023\032\024\034" +
    "\025\024\120\067\001\002\000\006\011\041\023\070\001" +
    "\002\000\004\107\071\001\002\000\010\003\uffdd\106\uffdd" +
    "\121\uffdd\001\002\000\040\005\023\006\033\007\020\010" +
    "\030\012\016\013\021\014\027\015\026\016\025\017\017" +
    "\020\022\023\032\024\034\025\024\120\073\001\002\000" +
    "\006\011\041\023\074\001\002\000\004\107\075\001\002" +
    "\000\010\003\uffdc\106\uffdc\121\uffdc\001\002\000\004\107" +
    "\077\001\002\000\004\002\000\001\002\000\004\114\155" +
    "\001\002\000\004\114\153\001\002\000\004\114\151\001" +
    "\002\000\004\114\147\001\002\000\004\114\145\001\002" +
    "\000\024\021\uffb3\022\uffb3\026\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\107\uffb3\001\002\000\004\114\143" +
    "\001\002\000\010\003\012\106\133\121\015\001\002\000" +
    "\004\114\130\001\002\000\004\114\126\001\002\000\024" +
    "\021\104\022\101\026\110\027\111\030\102\031\106\032" +
    "\103\033\100\107\114\001\002\000\024\021\uffb4\022\uffb4" +
    "\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\107" +
    "\uffb4\001\002\000\010\003\012\106\116\121\015\001\002" +
    "\000\010\003\012\106\122\121\015\001\002\000\040\005" +
    "\023\006\033\007\020\010\030\012\016\013\021\014\027" +
    "\015\026\016\025\017\017\020\022\023\032\024\034\025" +
    "\024\120\117\001\002\000\006\010\120\011\041\001\002" +
    "\000\004\107\121\001\002\000\010\003\ufff0\106\ufff0\121" +
    "\ufff0\001\002\000\040\005\023\006\033\007\020\010\030" +
    "\012\016\013\021\014\027\015\026\016\025\017\017\020" +
    "\022\023\032\024\034\025\024\120\123\001\002\000\006" +
    "\010\124\011\041\001\002\000\004\107\125\001\002\000" +
    "\010\003\uffef\106\uffef\121\uffef\001\002\000\004\123\127" +
    "\001\002\000\024\021\uffaf\022\uffaf\026\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\107\uffaf\001\002\000\004" +
    "\121\131\001\002\000\024\021\uffb0\022\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\107\uffb0\001\002" +
    "\000\010\003\012\106\137\121\015\001\002\000\040\005" +
    "\023\006\033\007\020\010\030\012\016\013\021\014\027" +
    "\015\026\016\025\017\017\020\022\023\032\024\034\025" +
    "\024\120\134\001\002\000\006\010\135\011\041\001\002" +
    "\000\004\107\136\001\002\000\010\003\ufff2\106\ufff2\121" +
    "\ufff2\001\002\000\040\005\023\006\033\007\020\010\030" +
    "\012\016\013\021\014\027\015\026\016\025\017\017\020" +
    "\022\023\032\024\034\025\024\120\140\001\002\000\006" +
    "\010\141\011\041\001\002\000\004\107\142\001\002\000" +
    "\010\003\ufff1\106\ufff1\121\ufff1\001\002\000\004\121\144" +
    "\001\002\000\024\021\uffad\022\uffad\026\uffad\027\uffad\030" +
    "\uffad\031\uffad\032\uffad\033\uffad\107\uffad\001\002\000\004" +
    "\121\146\001\002\000\024\021\uffb2\022\uffb2\026\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\107\uffb2\001\002" +
    "\000\004\121\150\001\002\000\024\021\uffac\022\uffac\026" +
    "\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\107\uffac" +
    "\001\002\000\004\123\152\001\002\000\024\021\uffae\022" +
    "\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae" +
    "\107\uffae\001\002\000\004\121\154\001\002\000\024\021" +
    "\uffb1\022\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\033\uffb1\107\uffb1\001\002\000\006\035\156\036\157\001" +
    "\002\000\024\021\uffab\022\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\107\uffab\001\002\000\024\021" +
    "\uffaa\022\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa" +
    "\033\uffaa\107\uffaa\001\002\000\010\003\012\106\162\121" +
    "\015\001\002\000\010\003\012\106\166\121\015\001\002" +
    "\000\040\005\023\006\033\007\020\010\030\012\016\013" +
    "\021\014\027\015\026\016\025\017\017\020\022\023\032" +
    "\024\034\025\024\120\163\001\002\000\006\011\041\014" +
    "\164\001\002\000\004\107\165\001\002\000\010\003\uffeb" +
    "\106\uffeb\121\uffeb\001\002\000\040\005\023\006\033\007" +
    "\020\010\030\012\016\013\021\014\027\015\026\016\025" +
    "\017\017\020\022\023\032\024\034\025\024\120\167\001" +
    "\002\000\006\011\041\014\170\001\002\000\004\107\171" +
    "\001\002\000\010\003\uffed\106\uffed\121\uffed\001\002\000" +
    "\010\003\012\106\174\121\015\001\002\000\010\003\012" +
    "\106\200\121\015\001\002\000\040\005\023\006\033\007" +
    "\020\010\030\012\016\013\021\014\027\015\026\016\025" +
    "\017\017\020\022\023\032\024\034\025\024\120\175\001" +
    "\002\000\006\011\041\015\176\001\002\000\004\107\177" +
    "\001\002\000\010\003\uffea\106\uffea\121\uffea\001\002\000" +
    "\040\005\023\006\033\007\020\010\030\012\016\013\021" +
    "\014\027\015\026\016\025\017\017\020\022\023\032\024" +
    "\034\025\024\120\201\001\002\000\006\011\041\015\202" +
    "\001\002\000\004\107\203\001\002\000\010\003\uffec\106" +
    "\uffec\121\uffec\001\002\000\004\106\213\001\002\000\024" +
    "\021\104\022\101\026\110\027\111\030\102\031\106\032" +
    "\103\033\100\107\206\001\002\000\004\106\207\001\002" +
    "\000\004\120\210\001\002\000\004\016\211\001\002\000" +
    "\004\107\212\001\002\000\010\003\uffe6\106\uffe6\121\uffe6" +
    "\001\002\000\004\120\214\001\002\000\004\016\215\001" +
    "\002\000\004\107\216\001\002\000\010\003\uffe7\106\uffe7" +
    "\121\uffe7\001\002\000\010\003\012\106\221\121\015\001" +
    "\002\000\010\003\012\106\225\121\015\001\002\000\040" +
    "\005\023\006\033\007\020\010\030\012\016\013\021\014" +
    "\027\015\026\016\025\017\017\020\022\023\032\024\034" +
    "\025\024\120\222\001\002\000\006\011\041\025\223\001" +
    "\002\000\004\107\224\001\002\000\010\003\uffe1\106\uffe1" +
    "\121\uffe1\001\002\000\040\005\023\006\033\007\020\010" +
    "\030\012\016\013\021\014\027\015\026\016\025\017\017" +
    "\020\022\023\032\024\034\025\024\120\226\001\002\000" +
    "\006\011\041\025\227\001\002\000\004\107\230\001\002" +
    "\000\010\003\uffe0\106\uffe0\121\uffe0\001\002\000\010\003" +
    "\012\106\233\121\015\001\002\000\010\003\012\106\237" +
    "\121\015\001\002\000\040\005\023\006\033\007\020\010" +
    "\030\012\016\013\021\014\027\015\026\016\025\017\017" +
    "\020\022\023\032\024\034\025\024\120\234\001\002\000" +
    "\006\005\235\011\041\001\002\000\004\107\236\001\002" +
    "\000\010\003\ufffc\106\ufffc\121\ufffc\001\002\000\040\005" +
    "\023\006\033\007\020\010\030\012\016\013\021\014\027" +
    "\015\026\016\025\017\017\020\022\023\032\024\034\025" +
    "\024\120\240\001\002\000\006\005\241\011\041\001\002" +
    "\000\004\107\242\001\002\000\010\003\ufffb\106\ufffb\121" +
    "\ufffb\001\002\000\020\003\250\034\244\037\246\041\245" +
    "\067\u015f\070\252\071\247\001\002\000\024\035\260\036" +
    "\266\070\264\071\263\074\267\105\265\121\256\123\261" +
    "\124\257\001\002\000\004\074\u0156\001\002\000\004\074" +
    "\u0144\001\002\000\004\122\355\001\002\000\006\073\353" +
    "\100\354\001\002\000\010\003\uffdb\106\uffdb\121\uffdb\001" +
    "\002\000\004\122\254\001\002\000\022\003\uffd4\034\uffd4" +
    "\037\uffd4\041\uffd4\067\uffd4\070\uffd4\071\uffd4\073\uffd4\001" +
    "\002\000\004\114\255\001\002\000\024\035\260\036\266" +
    "\070\264\071\263\074\267\105\265\121\256\123\261\124" +
    "\257\001\002\000\044\075\uff9a\077\uff9a\100\uff9a\101\uff9a" +
    "\102\uff9a\103\uff9a\104\uff9a\106\uff9a\107\uff9a\110\uff9a\111" +
    "\uff9a\112\uff9a\113\uff9a\115\uff9a\116\uff9a\117\uff9a\120\uff9a" +
    "\001\002\000\044\075\uff98\077\uff98\100\uff98\101\uff98\102" +
    "\uff98\103\uff98\104\uff98\106\uff98\107\uff98\110\uff98\111\uff98" +
    "\112\uff98\113\uff98\115\uff98\116\uff98\117\uff98\120\uff98\001" +
    "\002\000\044\075\uff96\077\uff96\100\uff96\101\uff96\102\uff96" +
    "\103\uff96\104\uff96\106\uff96\107\uff96\110\uff96\111\uff96\112" +
    "\uff96\113\uff96\115\uff96\116\uff96\117\uff96\120\uff96\001\002" +
    "\000\044\075\uff99\077\uff99\100\uff99\101\uff99\102\uff99\103" +
    "\uff99\104\uff99\106\uff99\107\uff99\110\uff99\111\uff99\112\uff99" +
    "\113\uff99\115\uff99\116\uff99\117\uff99\120\uff99\001\002\000" +
    "\036\100\352\101\272\103\305\104\271\106\274\107\277" +
    "\110\303\111\273\112\301\113\306\115\302\116\300\117" +
    "\275\120\276\001\002\000\004\122\326\001\002\000\004" +
    "\122\325\001\002\000\024\035\260\036\266\070\264\071" +
    "\263\074\267\105\265\121\256\123\261\124\257\001\002" +
    "\000\044\075\uff95\077\uff95\100\uff95\101\uff95\102\uff95\103" +
    "\uff95\104\uff95\106\uff95\107\uff95\110\uff95\111\uff95\112\uff95" +
    "\113\uff95\115\uff95\116\uff95\117\uff95\120\uff95\001\002\000" +
    "\024\035\260\036\266\070\264\071\263\074\267\105\265" +
    "\121\256\123\261\124\257\001\002\000\036\075\304\101" +
    "\272\103\305\104\271\106\274\107\277\110\303\111\273" +
    "\112\301\113\306\115\302\116\300\117\275\120\276\001" +
    "\002\000\024\035\260\036\266\070\264\071\263\074\267" +
    "\105\265\121\256\123\261\124\257\001\002\000\024\035" +
    "\260\036\266\070\264\071\263\074\267\105\265\121\256" +
    "\123\261\124\257\001\002\000\024\035\260\036\266\070" +
    "\264\071\263\074\267\105\265\121\256\123\261\124\257" +
    "\001\002\000\024\035\260\036\266\070\264\071\263\074" +
    "\267\105\265\121\256\123\261\124\257\001\002\000\024" +
    "\035\260\036\266\070\264\071\263\074\267\105\265\121" +
    "\256\123\261\124\257\001\002\000\024\035\260\036\266" +
    "\070\264\071\263\074\267\105\265\121\256\123\261\124" +
    "\257\001\002\000\024\035\260\036\266\070\264\071\263" +
    "\074\267\105\265\121\256\123\261\124\257\001\002\000" +
    "\024\035\260\036\266\070\264\071\263\074\267\105\265" +
    "\121\256\123\261\124\257\001\002\000\024\035\260\036" +
    "\266\070\264\071\263\074\267\105\265\121\256\123\261" +
    "\124\257\001\002\000\024\035\260\036\266\070\264\071" +
    "\263\074\267\105\265\121\256\123\261\124\257\001\002" +
    "\000\024\035\260\036\266\070\264\071\263\074\267\105" +
    "\265\121\256\123\261\124\257\001\002\000\044\075\uff9b" +
    "\077\uff9b\100\uff9b\101\uff9b\102\uff9b\103\uff9b\104\uff9b\106" +
    "\uff9b\107\uff9b\110\uff9b\111\uff9b\112\uff9b\113\uff9b\115\uff9b" +
    "\116\uff9b\117\uff9b\120\uff9b\001\002\000\024\035\260\036" +
    "\266\070\264\071\263\074\267\105\265\121\256\123\261" +
    "\124\257\001\002\000\024\035\260\036\266\070\264\071" +
    "\263\074\267\105\265\121\256\123\261\124\257\001\002" +
    "\000\044\075\uffa1\077\uffa1\100\uffa1\101\uffa1\102\uffa1\103" +
    "\uffa1\104\uffa1\106\uffa1\107\uffa1\110\uffa1\111\uffa1\112\uffa1" +
    "\113\uffa1\115\302\116\300\117\275\120\276\001\002\000" +
    "\044\075\uff9f\077\uff9f\100\uff9f\101\uff9f\102\uff9f\103\uff9f" +
    "\104\271\106\274\107\277\110\303\111\273\112\301\113" +
    "\306\115\302\116\300\117\275\120\276\001\002\000\044" +
    "\075\uffa2\077\uffa2\100\uffa2\101\uffa2\102\uffa2\103\uffa2\104" +
    "\uffa2\106\uffa2\107\uffa2\110\uffa2\111\uffa2\112\uffa2\113\uffa2" +
    "\115\302\116\300\117\275\120\276\001\002\000\044\075" +
    "\uffa9\077\uffa9\100\uffa9\101\uffa9\102\uffa9\103\uffa9\104\uffa9" +
    "\106\uffa9\107\uffa9\110\uffa9\111\uffa9\112\uffa9\113\uffa9\115" +
    "\uffa9\116\uffa9\117\275\120\276\001\002\000\044\075\uffa0" +
    "\077\uffa0\100\uffa0\101\uffa0\102\uffa0\103\uffa0\104\uffa0\106" +
    "\uffa0\107\uffa0\110\uffa0\111\uffa0\112\uffa0\113\uffa0\115\302" +
    "\116\300\117\275\120\276\001\002\000\044\075\uffa8\077" +
    "\uffa8\100\uffa8\101\uffa8\102\uffa8\103\uffa8\104\uffa8\106\uffa8" +
    "\107\uffa8\110\uffa8\111\uffa8\112\uffa8\113\uffa8\115\uffa8\116" +
    "\uffa8\117\275\120\276\001\002\000\044\075\uffa5\077\uffa5" +
    "\100\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5\106\uffa5\107" +
    "\uffa5\110\uffa5\111\uffa5\112\uffa5\113\uffa5\115\302\116\300" +
    "\117\275\120\276\001\002\000\044\075\uffa7\077\uffa7\100" +
    "\uffa7\101\uffa7\102\uffa7\103\uffa7\104\uffa7\106\uffa7\107\uffa7" +
    "\110\uffa7\111\uffa7\112\uffa7\113\uffa7\115\uffa7\116\uffa7\117" +
    "\uffa7\120\uffa7\001\002\000\044\075\uffa6\077\uffa6\100\uffa6" +
    "\101\uffa6\102\uffa6\103\uffa6\104\uffa6\106\uffa6\107\uffa6\110" +
    "\uffa6\111\uffa6\112\uffa6\113\uffa6\115\uffa6\116\uffa6\117\uffa6" +
    "\120\uffa6\001\002\000\044\075\uffa4\077\uffa4\100\uffa4\101" +
    "\uffa4\102\uffa4\103\uffa4\104\uffa4\106\uffa4\107\uffa4\110\uffa4" +
    "\111\uffa4\112\uffa4\113\uffa4\115\302\116\300\117\275\120" +
    "\276\001\002\000\044\075\uffa3\077\uffa3\100\uffa3\101\uffa3" +
    "\102\uffa3\103\uffa3\104\uffa3\106\uffa3\107\uffa3\110\uffa3\111" +
    "\uffa3\112\uffa3\113\uffa3\115\302\116\300\117\275\120\276" +
    "\001\002\000\044\075\uff9d\077\uff9d\100\uff9d\101\uff9d\102" +
    "\uff9d\103\305\104\271\106\274\107\277\110\303\111\273" +
    "\112\301\113\306\115\302\116\300\117\275\120\276\001" +
    "\002\000\044\075\uff9e\077\uff9e\100\uff9e\101\uff9e\102\uff9e" +
    "\103\uff9e\104\uff9e\106\274\107\277\110\303\111\273\112" +
    "\301\113\306\115\302\116\300\117\275\120\276\001\002" +
    "\000\044\075\uff9c\077\uff9c\100\uff9c\101\uff9c\102\uff9c\103" +
    "\uff9c\104\uff9c\106\274\107\277\110\303\111\273\112\301" +
    "\113\306\115\302\116\300\117\275\120\276\001\002\000" +
    "\044\075\uff97\077\uff97\100\uff97\101\uff97\102\uff97\103\uff97" +
    "\104\uff97\106\uff97\107\uff97\110\uff97\111\uff97\112\uff97\113" +
    "\uff97\115\uff97\116\uff97\117\uff97\120\uff97\001\002\000\004" +
    "\101\327\001\002\000\016\043\332\044\334\045\335\053" +
    "\333\054\331\065\330\001\002\000\004\074\350\001\002" +
    "\000\004\074\346\001\002\000\004\074\344\001\002\000" +
    "\004\074\342\001\002\000\004\074\340\001\002\000\004" +
    "\074\336\001\002\000\004\075\337\001\002\000\044\075" +
    "\uff93\077\uff93\100\uff93\101\uff93\102\uff93\103\uff93\104\uff93" +
    "\106\uff93\107\uff93\110\uff93\111\uff93\112\uff93\113\uff93\115" +
    "\uff93\116\uff93\117\uff93\120\uff93\001\002\000\004\075\341" +
    "\001\002\000\044\075\uff94\077\uff94\100\uff94\101\uff94\102" +
    "\uff94\103\uff94\104\uff94\106\uff94\107\uff94\110\uff94\111\uff94" +
    "\112\uff94\113\uff94\115\uff94\116\uff94\117\uff94\120\uff94\001" +
    "\002\000\004\075\343\001\002\000\044\075\uff91\077\uff91" +
    "\100\uff91\101\uff91\102\uff91\103\uff91\104\uff91\106\uff91\107" +
    "\uff91\110\uff91\111\uff91\112\uff91\113\uff91\115\uff91\116\uff91" +
    "\117\uff91\120\uff91\001\002\000\004\075\345\001\002\000" +
    "\044\075\uff92\077\uff92\100\uff92\101\uff92\102\uff92\103\uff92" +
    "\104\uff92\106\uff92\107\uff92\110\uff92\111\uff92\112\uff92\113" +
    "\uff92\115\uff92\116\uff92\117\uff92\120\uff92\001\002\000\004" +
    "\075\347\001\002\000\044\075\uff90\077\uff90\100\uff90\101" +
    "\uff90\102\uff90\103\uff90\104\uff90\106\uff90\107\uff90\110\uff90" +
    "\111\uff90\112\uff90\113\uff90\115\uff90\116\uff90\117\uff90\120" +
    "\uff90\001\002\000\004\075\351\001\002\000\044\075\uff8f" +
    "\077\uff8f\100\uff8f\101\uff8f\102\uff8f\103\uff8f\104\uff8f\106" +
    "\uff8f\107\uff8f\110\uff8f\111\uff8f\112\uff8f\113\uff8f\115\uff8f" +
    "\116\uff8f\117\uff8f\120\uff8f\001\002\000\022\003\uffd2\034" +
    "\uffd2\037\uffd2\041\uffd2\067\uffd2\070\uffd2\071\uffd2\073\uffd2" +
    "\001\002\000\022\003\uffb9\034\uffb9\037\uffb9\041\uffb9\067" +
    "\uffb9\070\uffb9\071\uffb9\073\uffb9\001\002\000\022\003\uffba" +
    "\034\uffba\037\uffba\041\uffba\067\uffba\070\uffba\071\uffba\073" +
    "\uffba\001\002\000\006\101\356\114\357\001\002\000\024" +
    "\046\u0120\047\u011d\050\u011f\051\u011c\055\u0118\056\u0119\062" +
    "\u011a\064\u011e\066\u011b\001\002\000\016\042\360\052\362" +
    "\057\365\060\364\061\361\063\363\001\002\000\004\074" +
    "\u0114\001\002\000\004\074\u0109\001\002\000\004\074\u0105" +
    "\001\002\000\004\074\u0101\001\002\000\004\074\375\001" +
    "\002\000\004\074\366\001\002\000\024\035\260\036\266" +
    "\070\264\071\263\074\267\105\265\121\256\123\261\124" +
    "\257\001\002\000\042\075\uffb5\077\uffb5\101\272\102\uffb5" +
    "\103\305\104\271\106\274\107\277\110\303\111\273\112" +
    "\301\113\306\115\302\116\300\117\275\120\276\001\002" +
    "\000\006\075\372\102\371\001\002\000\024\035\260\036" +
    "\266\070\264\071\263\074\267\105\265\121\256\123\261" +
    "\124\257\001\002\000\004\100\373\001\002\000\022\003" +
    "\uffc7\034\uffc7\037\uffc7\041\uffc7\067\uffc7\070\uffc7\071\uffc7" +
    "\073\uffc7\001\002\000\042\075\uffb6\077\uffb6\101\272\102" +
    "\uffb6\103\305\104\271\106\274\107\277\110\303\111\273" +
    "\112\301\113\306\115\302\116\300\117\275\120\276\001" +
    "\002\000\024\035\260\036\266\070\264\071\263\074\267" +
    "\105\265\121\256\123\261\124\257\001\002\000\006\075" +
    "\377\102\371\001\002\000\004\100\u0100\001\002\000\022" +
    "\003\uffc6\034\uffc6\037\uffc6\041\uffc6\067\uffc6\070\uffc6\071" +
    "\uffc6\073\uffc6\001\002\000\024\035\260\036\266\070\264" +
    "\071\263\074\267\105\265\121\256\123\261\124\257\001" +
    "\002\000\006\075\u0103\102\371\001\002\000\004\100\u0104" +
    "\001\002\000\022\003\uffc4\034\uffc4\037\uffc4\041\uffc4\067" +
    "\uffc4\070\uffc4\071\uffc4\073\uffc4\001\002\000\024\035\260" +
    "\036\266\070\264\071\263\074\267\105\265\121\256\123" +
    "\261\124\257\001\002\000\006\075\u0107\102\371\001\002" +
    "\000\004\100\u0108\001\002\000\022\003\uffc8\034\uffc8\037" +
    "\uffc8\041\uffc8\067\uffc8\070\uffc8\071\uffc8\073\uffc8\001\002" +
    "\000\004\076\u010a\001\002\000\024\035\260\036\266\070" +
    "\264\071\263\074\267\105\265\121\256\123\261\124\257" +
    "\001\002\000\006\075\u010d\102\u010c\001\002\000\004\076" +
    "\u010f\001\002\000\004\100\u010e\001\002\000\022\003\uffc5" +
    "\034\uffc5\037\uffc5\041\uffc5\067\uffc5\070\uffc5\071\uffc5\073" +
    "\uffc5\001\002\000\024\035\260\036\266\070\264\071\263" +
    "\074\267\105\265\121\256\123\261\124\257\001\002\000" +
    "\006\077\u0111\102\371\001\002\000\006\075\uffb8\102\uffb8" +
    "\001\002\000\006\077\u0113\102\371\001\002\000\006\075" +
    "\uffb7\102\uffb7\001\002\000\024\035\260\036\266\070\264" +
    "\071\263\074\267\105\265\121\256\123\261\124\257\001" +
    "\002\000\006\075\u0116\102\371\001\002\000\004\100\u0117" +
    "\001\002\000\022\003\uffc9\034\uffc9\037\uffc9\041\uffc9\067" +
    "\uffc9\070\uffc9\071\uffc9\073\uffc9\001\002\000\004\074\u0140" +
    "\001\002\000\004\074\u013c\001\002\000\004\074\u0138\001" +
    "\002\000\004\074\u0134\001\002\000\004\074\u0131\001\002" +
    "\000\004\074\u012d\001\002\000\004\074\u0129\001\002\000" +
    "\004\074\u0125\001\002\000\004\074\u0121\001\002\000\024" +
    "\035\260\036\266\070\264\071\263\074\267\105\265\121" +
    "\256\123\261\124\257\001\002\000\036\075\u0123\101\272" +
    "\103\305\104\271\106\274\107\277\110\303\111\273\112" +
    "\301\113\306\115\302\116\300\117\275\120\276\001\002" +
    "\000\004\100\u0124\001\002\000\022\003\uffc1\034\uffc1\037" +
    "\uffc1\041\uffc1\067\uffc1\070\uffc1\071\uffc1\073\uffc1\001\002" +
    "\000\024\035\260\036\266\070\264\071\263\074\267\105" +
    "\265\121\256\123\261\124\257\001\002\000\036\075\u0127" +
    "\101\272\103\305\104\271\106\274\107\277\110\303\111" +
    "\273\112\301\113\306\115\302\116\300\117\275\120\276" +
    "\001\002\000\004\100\u0128\001\002\000\022\003\uffc2\034" +
    "\uffc2\037\uffc2\041\uffc2\067\uffc2\070\uffc2\071\uffc2\073\uffc2" +
    "\001\002\000\024\035\260\036\266\070\264\071\263\074" +
    "\267\105\265\121\256\123\261\124\257\001\002\000\036" +
    "\075\u012b\101\272\103\305\104\271\106\274\107\277\110" +
    "\303\111\273\112\301\113\306\115\302\116\300\117\275" +
    "\120\276\001\002\000\004\100\u012c\001\002\000\022\003" +
    "\uffbe\034\uffbe\037\uffbe\041\uffbe\067\uffbe\070\uffbe\071\uffbe" +
    "\073\uffbe\001\002\000\024\035\260\036\266\070\264\071" +
    "\263\074\267\105\265\121\256\123\261\124\257\001\002" +
    "\000\036\075\u012f\101\272\103\305\104\271\106\274\107" +
    "\277\110\303\111\273\112\301\113\306\115\302\116\300" +
    "\117\275\120\276\001\002\000\004\100\u0130\001\002\000" +
    "\022\003\uffc3\034\uffc3\037\uffc3\041\uffc3\067\uffc3\070\uffc3" +
    "\071\uffc3\073\uffc3\001\002\000\004\075\u0132\001\002\000" +
    "\004\100\u0133\001\002\000\022\003\uffbb\034\uffbb\037\uffbb" +
    "\041\uffbb\067\uffbb\070\uffbb\071\uffbb\073\uffbb\001\002\000" +
    "\024\035\260\036\266\070\264\071\263\074\267\105\265" +
    "\121\256\123\261\124\257\001\002\000\036\075\u0136\101" +
    "\272\103\305\104\271\106\274\107\277\110\303\111\273" +
    "\112\301\113\306\115\302\116\300\117\275\120\276\001" +
    "\002\000\004\100\u0137\001\002\000\022\003\uffbc\034\uffbc" +
    "\037\uffbc\041\uffbc\067\uffbc\070\uffbc\071\uffbc\073\uffbc\001" +
    "\002\000\024\035\260\036\266\070\264\071\263\074\267" +
    "\105\265\121\256\123\261\124\257\001\002\000\036\075" +
    "\u013a\101\272\103\305\104\271\106\274\107\277\110\303" +
    "\111\273\112\301\113\306\115\302\116\300\117\275\120" +
    "\276\001\002\000\004\100\u013b\001\002\000\022\003\uffbd" +
    "\034\uffbd\037\uffbd\041\uffbd\067\uffbd\070\uffbd\071\uffbd\073" +
    "\uffbd\001\002\000\024\035\260\036\266\070\264\071\263" +
    "\074\267\105\265\121\256\123\261\124\257\001\002\000" +
    "\036\075\u013e\101\272\103\305\104\271\106\274\107\277" +
    "\110\303\111\273\112\301\113\306\115\302\116\300\117" +
    "\275\120\276\001\002\000\004\100\u013f\001\002\000\022" +
    "\003\uffbf\034\uffbf\037\uffbf\041\uffbf\067\uffbf\070\uffbf\071" +
    "\uffbf\073\uffbf\001\002\000\024\035\260\036\266\070\264" +
    "\071\263\074\267\105\265\121\256\123\261\124\257\001" +
    "\002\000\036\075\u0142\101\272\103\305\104\271\106\274" +
    "\107\277\110\303\111\273\112\301\113\306\115\302\116" +
    "\300\117\275\120\276\001\002\000\004\100\u0143\001\002" +
    "\000\022\003\uffc0\034\uffc0\037\uffc0\041\uffc0\067\uffc0\070" +
    "\uffc0\071\uffc0\073\uffc0\001\002\000\024\035\260\036\266" +
    "\070\264\071\263\074\267\105\265\121\256\123\261\124" +
    "\257\001\002\000\036\075\u0146\101\272\103\305\104\271" +
    "\106\274\107\277\110\303\111\273\112\301\113\306\115" +
    "\302\116\300\117\275\120\276\001\002\000\004\072\u0147" +
    "\001\002\000\020\003\250\034\244\037\246\041\245\070" +
    "\252\071\247\073\u0149\001\002\000\020\003\250\034\244" +
    "\037\246\041\245\070\252\071\247\073\u0150\001\002\000" +
    "\024\003\uffd1\034\uffd1\037\uffd1\040\u014a\041\uffd1\067\uffd1" +
    "\070\uffd1\071\uffd1\073\uffd1\001\002\000\004\072\u014b\001" +
    "\002\000\020\003\250\034\244\037\246\041\245\070\252" +
    "\071\247\073\u014d\001\002\000\020\003\250\034\244\037" +
    "\246\041\245\070\252\071\247\073\u014e\001\002\000\022" +
    "\003\uffcf\034\uffcf\037\uffcf\041\uffcf\067\uffcf\070\uffcf\071" +
    "\uffcf\073\uffcf\001\002\000\022\003\uffcd\034\uffcd\037\uffcd" +
    "\041\uffcd\067\uffcd\070\uffcd\071\uffcd\073\uffcd\001\002\000" +
    "\022\003\uffd5\034\uffd5\037\uffd5\041\uffd5\067\uffd5\070\uffd5" +
    "\071\uffd5\073\uffd5\001\002\000\024\003\uffd0\034\uffd0\037" +
    "\uffd0\040\u0151\041\uffd0\067\uffd0\070\uffd0\071\uffd0\073\uffd0" +
    "\001\002\000\004\072\u0152\001\002\000\020\003\250\034" +
    "\244\037\246\041\245\070\252\071\247\073\u0154\001\002" +
    "\000\020\003\250\034\244\037\246\041\245\070\252\071" +
    "\247\073\u0155\001\002\000\022\003\uffce\034\uffce\037\uffce" +
    "\041\uffce\067\uffce\070\uffce\071\uffce\073\uffce\001\002\000" +
    "\022\003\uffcc\034\uffcc\037\uffcc\041\uffcc\067\uffcc\070\uffcc" +
    "\071\uffcc\073\uffcc\001\002\000\024\035\260\036\266\070" +
    "\264\071\263\074\267\105\265\121\256\123\261\124\257" +
    "\001\002\000\036\075\u0158\101\272\103\305\104\271\106" +
    "\274\107\277\110\303\111\273\112\301\113\306\115\302" +
    "\116\300\117\275\120\276\001\002\000\004\072\u0159\001" +
    "\002\000\020\003\250\034\244\037\246\041\245\070\252" +
    "\071\247\073\u015b\001\002\000\020\003\250\034\244\037" +
    "\246\041\245\070\252\071\247\073\u015c\001\002\000\022" +
    "\003\uffcb\034\uffcb\037\uffcb\041\uffcb\067\uffcb\070\uffcb\071" +
    "\uffcb\073\uffcb\001\002\000\022\003\uffca\034\uffca\037\uffca" +
    "\041\uffca\067\uffca\070\uffca\071\uffca\073\uffca\001\002\000" +
    "\036\100\u015e\101\272\103\305\104\271\106\274\107\277" +
    "\110\303\111\273\112\301\113\306\115\302\116\300\117" +
    "\275\120\276\001\002\000\022\003\uffd3\034\uffd3\037\uffd3" +
    "\041\uffd3\067\uffd3\070\uffd3\071\uffd3\073\uffd3\001\002\000" +
    "\010\003\uffda\106\uffda\121\uffda\001\002\000\004\106\u0167" +
    "\001\002\000\024\021\104\022\101\026\110\027\111\030" +
    "\102\031\106\032\103\033\100\107\u0162\001\002\000\004" +
    "\106\u0163\001\002\000\004\120\u0164\001\002\000\004\013" +
    "\u0165\001\002\000\004\107\u0166\001\002\000\010\003\uffe8" +
    "\106\uffe8\121\uffe8\001\002\000\004\120\u0168\001\002\000" +
    "\004\013\u0169\001\002\000\004\107\u016a\001\002\000\010" +
    "\003\uffe9\106\uffe9\121\uffe9\001\002\000\010\003\012\106" +
    "\u0178\121\015\001\002\000\024\021\104\022\101\026\110" +
    "\027\111\030\102\031\106\032\103\033\100\107\u016d\001" +
    "\002\000\010\003\012\106\u016f\121\015\001\002\000\010" +
    "\003\012\106\u0173\121\015\001\002\000\040\005\023\006" +
    "\033\007\020\010\030\012\016\013\021\014\027\015\026" +
    "\016\025\017\017\020\022\023\032\024\034\025\024\120" +
    "\u0170\001\002\000\006\007\u0171\011\041\001\002\000\004" +
    "\107\u0172\001\002\000\010\003\ufff6\106\ufff6\121\ufff6\001" +
    "\002\000\040\005\023\006\033\007\020\010\030\012\016" +
    "\013\021\014\027\015\026\016\025\017\017\020\022\023" +
    "\032\024\034\025\024\120\u0174\001\002\000\006\007\u0175" +
    "\011\041\001\002\000\004\107\u0176\001\002\000\010\003" +
    "\ufff5\106\ufff5\121\ufff5\001\002\000\010\003\012\106\u017c" +
    "\121\015\001\002\000\040\005\023\006\033\007\020\010" +
    "\030\012\016\013\021\014\027\015\026\016\025\017\017" +
    "\020\022\023\032\024\034\025\024\120\u0179\001\002\000" +
    "\006\007\u017a\011\041\001\002\000\004\107\u017b\001\002" +
    "\000\010\003\ufff8\106\ufff8\121\ufff8\001\002\000\040\005" +
    "\023\006\033\007\020\010\030\012\016\013\021\014\027" +
    "\015\026\016\025\017\017\020\022\023\032\024\034\025" +
    "\024\120\u017d\001\002\000\006\007\u017e\011\041\001\002" +
    "\000\004\107\u017f\001\002\000\010\003\ufff7\106\ufff7\121" +
    "\ufff7\001\002\000\010\003\012\106\u0182\121\015\001\002" +
    "\000\010\003\012\106\u0186\121\015\001\002\000\040\005" +
    "\023\006\033\007\020\010\030\012\016\013\021\014\027" +
    "\015\026\016\025\017\017\020\022\023\032\024\034\025" +
    "\024\120\u0183\001\002\000\006\011\041\017\u0184\001\002" +
    "\000\004\107\u0185\001\002\000\010\003\ufff4\106\ufff4\121" +
    "\ufff4\001\002\000\040\005\023\006\033\007\020\010\030" +
    "\012\016\013\021\014\027\015\026\016\025\017\017\020" +
    "\022\023\032\024\034\025\024\120\u0187\001\002\000\006" +
    "\011\041\017\u0188\001\002\000\004\107\u0189\001\002\000" +
    "\010\003\ufff3\106\ufff3\121\ufff3\001\002\000\010\003\012" +
    "\106\u0197\121\015\001\002\000\024\021\104\022\101\026" +
    "\110\027\111\030\102\031\106\032\103\033\100\107\u018c" +
    "\001\002\000\010\003\012\106\u018e\121\015\001\002\000" +
    "\010\003\012\106\u0192\121\015\001\002\000\040\005\023" +
    "\006\033\007\020\010\030\012\016\013\021\014\027\015" +
    "\026\016\025\017\017\020\022\023\032\024\034\025\024" +
    "\120\u018f\001\002\000\006\011\041\012\u0190\001\002\000" +
    "\004\107\u0191\001\002\000\010\003\uffe3\106\uffe3\121\uffe3" +
    "\001\002\000\040\005\023\006\033\007\020\010\030\012" +
    "\016\013\021\014\027\015\026\016\025\017\017\020\022" +
    "\023\032\024\034\025\024\120\u0193\001\002\000\006\011" +
    "\041\012\u0194\001\002\000\004\107\u0195\001\002\000\010" +
    "\003\uffe2\106\uffe2\121\uffe2\001\002\000\010\003\012\106" +
    "\u019b\121\015\001\002\000\040\005\023\006\033\007\020" +
    "\010\030\012\016\013\021\014\027\015\026\016\025\017" +
    "\017\020\022\023\032\024\034\025\024\120\u0198\001\002" +
    "\000\006\011\041\012\u0199\001\002\000\004\107\u019a\001" +
    "\002\000\010\003\uffe5\106\uffe5\121\uffe5\001\002\000\040" +
    "\005\023\006\033\007\020\010\030\012\016\013\021\014" +
    "\027\015\026\016\025\017\017\020\022\023\032\024\034" +
    "\025\024\120\u019c\001\002\000\006\011\041\012\u019d\001" +
    "\002\000\004\107\u019e\001\002\000\010\003\uffe4\106\uffe4" +
    "\121\uffe4\001\002\000\010\003\uffd7\106\uffd7\121\uffd7\001" +
    "\002\000\010\003\uffd8\106\uffd8\121\uffd8\001\002\000\040" +
    "\005\023\006\033\007\020\010\030\012\016\013\021\014" +
    "\027\015\026\016\025\017\017\020\022\023\032\024\034" +
    "\025\024\120\u01a2\001\002\000\006\004\u01a3\011\041\001" +
    "\002\000\004\107\u01a4\001\002\000\004\002\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a2\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\010\005\013\001\001\000\004\005\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\u018a\013\104\001\001\000\002\001" +
    "\001\000\006\011\u016b\013\104\001\001\000\006\011\u0160" +
    "\013\104\001\001\000\006\004\242\006\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\204\013\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\111\013\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\035\005" +
    "\013\001\001\000\004\005\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\052\005\013\001\001\000\004\005\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\064\005" +
    "\013\001\001\000\004\005\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\131\005\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\112\001\001\000\002\001\001\000" +
    "\006\003\114\005\013\001\001\000\004\005\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\160\005" +
    "\013\001\001\000\004\005\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\172\005\013\001\001\000\004\005" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\217\005\013\001\001\000\004" +
    "\005\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\231\005\013\001\001\000\004\005\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\u014e\001\001\000\004\012" +
    "\u015c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\261" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\323\001\001\000\002\001" +
    "\001\000\004\012\267\001\001\000\002\001\001\000\004" +
    "\012\322\001\001\000\004\012\321\001\001\000\004\012" +
    "\320\001\001\000\004\012\317\001\001\000\004\012\316" +
    "\001\001\000\004\012\315\001\001\000\004\012\314\001" +
    "\001\000\004\012\313\001\001\000\004\012\312\001\001" +
    "\000\004\012\311\001\001\000\004\012\310\001\001\000" +
    "\002\001\001\000\004\012\307\001\001\000\004\012\306" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\367\012" +
    "\366\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\373\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\375\012\366\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\u0101\012\366\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\u0105\012\366\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\u010a\001\001\000\006\010\u0111\012\366\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\u010f\012\366\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\u0114\012\366\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u0121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u0125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u0129\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u012d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u0134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u0138\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u013c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u0140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u0144\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\u0147\006\252\001\001" +
    "\000\004\006\u014e\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\u014b\006\252\001\001\000\004\006\u014e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\u0152" +
    "\006\252\001\001\000\004\006\u014e\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u0156\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\u0159\006\252\001" +
    "\001\000\004\006\u014e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\u0176\005" +
    "\013\001\001\000\004\013\112\001\001\000\006\003\u016d" +
    "\005\013\001\001\000\004\005\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\u0180\005\013\001\001\000\004\005" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\u0195" +
    "\005\013\001\001\000\004\013\112\001\001\000\006\003" +
    "\u018c\005\013\001\001\000\004\005\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public StructCompi AST;
    
    public LinkedList<ErrorAnalisis> errores = new LinkedList<>();

    public void syntax_error(Symbol s)
    {
        ErrorAnalisis e = new ErrorAnalisis("Error Sintáctico",s.value.toString(),"no se esperaba este símbolo",s.left,s.right);
        errores.add(e);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        ErrorAnalisis e = new ErrorAnalisis("Error Sintáctico Irrecuperable","","no se esperaba este símbolo: " + symbl_name_from_id(s.sym),s.left,s.right);
        errores.add(e);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= MENORQUE RCOMPI MAYORQUE MENORQUE SIGNODIVIDIDO RCOMPI MAYORQUE 
            {
              Object RESULT =null;
		AST = new StructCompi(); AST.setTipo(Struct.Tipo.COMPI);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= MENORQUE RCOMPI MAYORQUE instrucciones MENORQUE SIGNODIVIDIDO RCOMPI MAYORQUE 
            {
              Object RESULT =null;
		int arbolleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int arbolright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> arbol = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		AST = new StructCompi(arbol); AST.setTipo(Struct.Tipo.COMPI);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int arbolleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int arbolright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> arbol = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = arbol; RESULT.add(i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= MENORQUE RCABECERA MAYORQUE MENORQUE SIGNODIVIDIDO RCABECERA MAYORQUE 
            {
              Instruccion RESULT =null;
		Struct st; RESULT = st = new StructCabecera(); st.setTipo(Struct.Tipo.CABECERA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= MENORQUE RCABECERA MAYORQUE instrucciones MENORQUE SIGNODIVIDIDO RCABECERA MAYORQUE 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		Struct st; RESULT = st = new StructCabecera(ins); st.setTipo(Struct.Tipo.CABECERA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= MENORQUE RTITULO MAYORQUE MENORQUE SIGNODIVIDIDO RTITULO MAYORQUE 
            {
              Instruccion RESULT =null;
		Struct st; RESULT = st = new StructTitulo(); st.setTipo(Struct.Tipo.TITULO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= MENORQUE RTITULO MAYORQUE instrucciones MENORQUE SIGNODIVIDIDO RTITULO MAYORQUE 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		Struct st; RESULT = st = new StructTitulo(ins); st.setTipo(Struct.Tipo.TITULO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= MENORQUE RCUERPO MAYORQUE MENORQUE SIGNODIVIDIDO RCUERPO MAYORQUE 
            {
              Instruccion RESULT =null;
		Struct st; RESULT = st = new StructCuerpo(); st.setTipo(Struct.Tipo.CUERPO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= MENORQUE RCUERPO MAYORQUE instrucciones MENORQUE SIGNODIVIDIDO RCUERPO MAYORQUE 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		Struct st; RESULT = st = new StructCuerpo(ins); st.setTipo(Struct.Tipo.CUERPO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= MENORQUE RCUERPO atributos_struct MAYORQUE MENORQUE SIGNODIVIDIDO RCUERPO MAYORQUE 
            {
              Instruccion RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Atributo> atr = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		Struct st; RESULT = st = new StructCuerpo(atr, null); st.setTipo(Struct.Tipo.CUERPO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= MENORQUE RCUERPO atributos_struct MAYORQUE instrucciones MENORQUE SIGNODIVIDIDO RCUERPO MAYORQUE 
            {
              Instruccion RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Atributo> atr = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		Struct st; RESULT = st = new StructCuerpo(atr, ins); st.setTipo(Struct.Tipo.CUERPO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= MENORQUE RESPACIO MAYORQUE MENORQUE SIGNODIVIDIDO RESPACIO MAYORQUE 
            {
              Instruccion RESULT =null;
		Struct st; RESULT = st = new StructEspacio(); st.setTipo(Struct.Tipo.ESPACIO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= MENORQUE RESPACIO MAYORQUE instrucciones MENORQUE SIGNODIVIDIDO RESPACIO MAYORQUE 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		Struct st; RESULT = st = new StructEspacio(ins); st.setTipo(Struct.Tipo.ESPACIO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= MENORQUE RPARRAFO MAYORQUE MENORQUE SIGNODIVIDIDO RPARRAFO MAYORQUE 
            {
              Instruccion RESULT =null;
		Struct st; RESULT = st = new StructParrafo(); st.setTipo(Struct.Tipo.PARRAFO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= MENORQUE RPARRAFO MAYORQUE instrucciones MENORQUE SIGNODIVIDIDO RPARRAFO MAYORQUE 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		Struct st; RESULT = st = new StructParrafo(ins); st.setTipo(Struct.Tipo.PARRAFO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= MENORQUE RPARRAFO atributos_struct MAYORQUE MENORQUE SIGNODIVIDIDO RPARRAFO MAYORQUE 
            {
              Instruccion RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Atributo> atr = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		Struct st; RESULT = st = new StructParrafo(atr, null); st.setTipo(Struct.Tipo.PARRAFO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= MENORQUE RPARRAFO atributos_struct MAYORQUE instrucciones MENORQUE SIGNODIVIDIDO RPARRAFO MAYORQUE 
            {
              Instruccion RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Atributo> atr = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		Struct st; RESULT = st = new StructParrafo(atr, ins); st.setTipo(Struct.Tipo.PARRAFO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= MENORQUE SIGNODIVIDIDO RSALTO MAYORQUE 
            {
              Instruccion RESULT =null;
		Struct st; RESULT = st = new StructSalto(); st.setTipo(Struct.Tipo.SALTO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= MENORQUE RTEXTOA MAYORQUE instrucciones MENORQUE SIGNODIVIDIDO RTEXTOA MAYORQUE 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		Struct st; RESULT = st = new StructTextoA(ins); st.setTipo(Struct.Tipo.TEXTOA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= MENORQUE RTEXTOB MAYORQUE instrucciones MENORQUE SIGNODIVIDIDO RTEXTOB MAYORQUE 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		Struct st; RESULT = st = new StructTextoB(ins); st.setTipo(Struct.Tipo.TEXTOB);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= MENORQUE RTEXTOA MAYORQUE MENORQUE SIGNODIVIDIDO RTEXTOA MAYORQUE 
            {
              Instruccion RESULT =null;
		Struct st; RESULT = st = new StructTextoA(); st.setTipo(Struct.Tipo.TEXTOA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= MENORQUE RTEXTOB MAYORQUE MENORQUE SIGNODIVIDIDO RTEXTOB MAYORQUE 
            {
              Instruccion RESULT =null;
		Struct st; RESULT = st = new StructTextoB(); st.setTipo(Struct.Tipo.TEXTOB);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= MENORQUE RIMAGEN MAYORQUE MENORQUE SIGNODIVIDIDO RIMAGEN MAYORQUE 
            {
              Instruccion RESULT =null;
		Struct st; RESULT = st = new StructImagen(); st.setTipo(Struct.Tipo.IMAGEN);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= MENORQUE RIMAGEN atributos_struct MAYORQUE MENORQUE SIGNODIVIDIDO RIMAGEN MAYORQUE 
            {
              Instruccion RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Atributo> atr = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		Struct st; RESULT = st = new StructImagen(atr); st.setTipo(Struct.Tipo.IMAGEN);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= MENORQUE RBOTON MAYORQUE MENORQUE SIGNODIVIDIDO RBOTON MAYORQUE 
            {
              Instruccion RESULT =null;
		Struct st; RESULT = st = new StructBoton(); st.setTipo(Struct.Tipo.BOTON);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= MENORQUE RBOTON atributos_struct MAYORQUE MENORQUE SIGNODIVIDIDO RBOTON MAYORQUE 
            {
              Instruccion RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Atributo> atr = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		Struct st; RESULT = st = new StructBoton(atr); st.setTipo(Struct.Tipo.BOTON);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= MENORQUE RTABLA MAYORQUE MENORQUE SIGNODIVIDIDO RTABLA MAYORQUE 
            {
              Instruccion RESULT =null;
		Struct st; RESULT = st = new StructTabla(); st.setTipo(Struct.Tipo.TABLA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= MENORQUE RTABLA MAYORQUE instrucciones MENORQUE SIGNODIVIDIDO RTABLA MAYORQUE 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		Struct st; RESULT = st = new StructTabla(ins); st.setTipo(Struct.Tipo.TABLA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= MENORQUE RTABLA atributos_struct MAYORQUE MENORQUE SIGNODIVIDIDO RTABLA MAYORQUE 
            {
              Instruccion RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Atributo> atr = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		Struct st; RESULT = st = new StructTabla(atr, null); st.setTipo(Struct.Tipo.TABLA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= MENORQUE RTABLA atributos_struct MAYORQUE instrucciones MENORQUE SIGNODIVIDIDO RTABLA MAYORQUE 
            {
              Instruccion RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Atributo> atr = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		Struct st; RESULT = st = new StructTabla(atr, ins); st.setTipo(Struct.Tipo.TABLA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= MENORQUE RFILA MAYORQUE MENORQUE SIGNODIVIDIDO RFILA MAYORQUE 
            {
              Instruccion RESULT =null;
		Struct st; RESULT = st = new StructFila(); st.setTipo(Struct.Tipo.FILA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= MENORQUE RFILA MAYORQUE instrucciones MENORQUE SIGNODIVIDIDO RFILA MAYORQUE 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		Struct st; RESULT = st = new StructFila(ins); st.setTipo(Struct.Tipo.FILA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion ::= MENORQUE RCOLUMNA MAYORQUE MENORQUE SIGNODIVIDIDO RCOLUMNA MAYORQUE 
            {
              Instruccion RESULT =null;
		Struct st; RESULT = st = new StructColumna(); st.setTipo(Struct.Tipo.COLUMNA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= MENORQUE RCOLUMNA MAYORQUE instrucciones MENORQUE SIGNODIVIDIDO RCOLUMNA MAYORQUE 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		Struct st; RESULT = st = new StructColumna(ins); st.setTipo(Struct.Tipo.COLUMNA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= MENORQUE RCOLUMNAC MAYORQUE MENORQUE SIGNODIVIDIDO RCOLUMNAC MAYORQUE 
            {
              Instruccion RESULT =null;
		Struct st; RESULT = st = new StructColumnaC(); st.setTipo(Struct.Tipo.COLUMNA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= MENORQUE RCOLUMNAC MAYORQUE instrucciones MENORQUE SIGNODIVIDIDO RCOLUMNAC MAYORQUE 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		Struct st; RESULT = st = new StructColumnaC(ins); st.setTipo(Struct.Tipo.COLUMNA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= MENORQUE RHS ENDHS 
            {
              Instruccion RESULT =null;
		Struct st; RESULT = st = new CodigoHS(); st.setTipo(Struct.Tipo.HSCRIPT);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= MENORQUE RHS instruccionesHS ENDHS 
            {
              Instruccion RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		Struct st; RESULT = st = new CodigoHS(ins); st.setTipo(Struct.Tipo.HSCRIPT);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= CADENA 
            {
              Instruccion RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Struct st; RESULT = st = new TextoLibre(txt); st.setTipo(Struct.Tipo.TEXTOLIBRE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= error MAYORQUE 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= error ENDHS 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= error 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccionesHS ::= instruccionesHS instruccionHS 
            {
              LinkedList<Instruccion> RESULT =null;
		int arbolleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int arbolright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> arbol = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = arbol; RESULT.add(i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionesHS",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccionesHS ::= instruccionHS 
            {
              LinkedList<Instruccion> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionesHS",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccionHS ::= ECHO expresion PYCOMA 
            {
              Instruccion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion op = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Echo(op);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccionHS ::= DOLAR IDENTIFICADOR SIGNOIGUAL expresion PYCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion op = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Asignacion(id, op);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccionHS ::= RIF PARENTA expresion PARENTC LLAVEA LLAVEC 
            {
              Instruccion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Operacion op = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		RESULT = new If(op, null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instruccionHS ::= RIF PARENTA expresion PARENTC LLAVEA instruccionesHS LLAVEC 
            {
              Instruccion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operacion op = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new If(op, ins);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instruccionHS ::= RIF PARENTA expresion PARENTC LLAVEA LLAVEC RELSE LLAVEA LLAVEC 
            {
              Instruccion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Operacion op = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		RESULT = new If(op, null, null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instruccionHS ::= RIF PARENTA expresion PARENTC LLAVEA instruccionesHS LLAVEC RELSE LLAVEA LLAVEC 
            {
              Instruccion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Operacion op = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> ins1 = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		RESULT = new If(op, ins1, null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instruccionHS ::= RIF PARENTA expresion PARENTC LLAVEA LLAVEC RELSE LLAVEA instruccionesHS LLAVEC 
            {
              Instruccion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Operacion op = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int ins2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int ins2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> ins2 = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new If(op, null, ins2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instruccionHS ::= RIF PARENTA expresion PARENTC LLAVEA instruccionesHS LLAVEC RELSE LLAVEA instruccionesHS LLAVEC 
            {
              Instruccion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Operacion op = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> ins1 = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int ins2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int ins2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> ins2 = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new If(op, ins1, ins2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instruccionHS ::= MREPETIR PARENTA expresion PARENTC LLAVEA LLAVEC 
            {
              Instruccion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Operacion op = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		RESULT = new Repetir(op, null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instruccionHS ::= MREPETIR PARENTA expresion PARENTC LLAVEA instruccionesHS LLAVEC 
            {
              Instruccion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operacion op = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Repetir(op, ins);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instruccionHS ::= NUMERAL IDENTIFICADOR SIGNOIGUAL MCREARIMAGEN PARENTA parametros PARENTC PYCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Operacion> params = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Asignacion(id, new Operacion(new Imagen(params), Operacion.Tipo.IMAGEN));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instruccionHS ::= NUMERAL IDENTIFICADOR SIGNOIGUAL MCREARPARRAFO PARENTA parametros PARENTC PYCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Operacion> params = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Asignacion(id, new Operacion(new Parrafo(params), Operacion.Tipo.PARRAFO));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instruccionHS ::= NUMERAL IDENTIFICADOR SIGNOIGUAL MCREARTEXTOA PARENTA parametros PARENTC PYCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Operacion> params = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Asignacion(id, new Operacion(new TextoA(params), Operacion.Tipo.TEXTOA));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instruccionHS ::= NUMERAL IDENTIFICADOR SIGNOIGUAL MCREARTEXTOB PARENTA parametros PARENTC PYCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Operacion> params = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Asignacion(id, new Operacion(new TextoB(params), Operacion.Tipo.TEXTOB));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instruccionHS ::= NUMERAL IDENTIFICADOR SIGNOIGUAL MCREARTABLA PARENTA parametros_tabla PARENTC PYCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<LinkedList<Operacion>> params = (LinkedList<LinkedList<Operacion>>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Asignacion(id, new Operacion(new Tabla(params), Operacion.Tipo.TABLA));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instruccionHS ::= NUMERAL IDENTIFICADOR SIGNOIGUAL MCREARBOTON PARENTA parametros PARENTC PYCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Operacion> params = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Asignacion(id, new Operacion(new Boton(params), Operacion.Tipo.BOTON));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // instruccionHS ::= NUMERAL IDENTIFICADOR PUNTO MSETANCHO PARENTA expresion PARENTC PYCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion op = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Asignacion(id, op, Asignacion.Tipo.SETANCHO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instruccionHS ::= NUMERAL IDENTIFICADOR PUNTO MSETALTO PARENTA expresion PARENTC PYCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion op = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Asignacion(id, op, Asignacion.Tipo.SETALTO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instruccionHS ::= NUMERAL IDENTIFICADOR PUNTO MSETPATH PARENTA expresion PARENTC PYCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion op = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Asignacion(id, op, Asignacion.Tipo.SETPATH);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // instruccionHS ::= NUMERAL IDENTIFICADOR PUNTO MSETALINEACION PARENTA expresion PARENTC PYCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion op = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Asignacion(id, op, Asignacion.Tipo.SETALINEACION);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // instruccionHS ::= NUMERAL IDENTIFICADOR PUNTO MSETCONTENIDO PARENTA expresion PARENTC PYCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion op = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Asignacion(id, op, Asignacion.Tipo.SETCONTENIDO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // instruccionHS ::= NUMERAL IDENTIFICADOR PUNTO MSETTEXTO PARENTA expresion PARENTC PYCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion op = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Asignacion(id, op, Asignacion.Tipo.SETTEXTO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // instruccionHS ::= NUMERAL IDENTIFICADOR PUNTO MSETBORDE PARENTA expresion PARENTC PYCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion op = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Asignacion(id, op, Asignacion.Tipo.SETBORDE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // instruccionHS ::= NUMERAL IDENTIFICADOR PUNTO MCLICKBOTON PARENTA expresion PARENTC PYCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion op = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Asignacion(id, op, Asignacion.Tipo.CLICKBOTON);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // instruccionHS ::= NUMERAL IDENTIFICADOR PUNTO MINSERTAR PARENTA PARENTC PYCOMA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		RESULT = new Insertar(id);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // instruccionHS ::= error PYCOMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // instruccionHS ::= error LLAVEC 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionHS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametros_tabla ::= parametros_tabla COMA CORCHETEA parametros CORCHETEC 
            {
              LinkedList<LinkedList<Operacion>> RESULT =null;
		int arrsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int arrsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<LinkedList<Operacion>> arrs = (LinkedList<LinkedList<Operacion>>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Operacion> arr = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = arrs; RESULT.add(arr);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros_tabla",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametros_tabla ::= CORCHETEA parametros CORCHETEC 
            {
              LinkedList<LinkedList<Operacion>> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Operacion> arr = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new LinkedList<>(); RESULT.add(arr);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros_tabla",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametros ::= parametros COMA expresion 
            {
              LinkedList<Operacion> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Operacion> params = (LinkedList<Operacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion op = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = params; RESULT.add(op);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parametros ::= expresion 
            {
              LinkedList<Operacion> RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion op = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(op);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // atributos_struct ::= atributos_struct atributo_struct 
            {
              LinkedList<Atributo> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Atributo> params = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Atributo op = (Atributo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = params; RESULT.add(op);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos_struct",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // atributos_struct ::= atributo_struct 
            {
              LinkedList<Atributo> RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Atributo op = (Atributo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(op);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributos_struct",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // atributo_struct ::= RFONDO SIGNOIGUAL CADENA 
            {
              Atributo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Atributo(cad, Atributo.Tipo.FONDO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributo_struct",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // atributo_struct ::= RALINEACION SIGNOIGUAL CADENA 
            {
              Atributo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Atributo(cad, Atributo.Tipo.ALINEACION);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributo_struct",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // atributo_struct ::= RPATH SIGNOIGUAL CADENA 
            {
              Atributo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Atributo(cad, Atributo.Tipo.PATH);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributo_struct",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // atributo_struct ::= RALTO SIGNOIGUAL ENTERO 
            {
              Atributo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Atributo(Integer.valueOf(num), Atributo.Tipo.ALTO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributo_struct",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // atributo_struct ::= RANCHO SIGNOIGUAL ENTERO 
            {
              Atributo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Atributo(Integer.valueOf(num), Atributo.Tipo.ANCHO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributo_struct",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // atributo_struct ::= RID SIGNOIGUAL CADENA 
            {
              Atributo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Atributo(cad, Atributo.Tipo.ID);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributo_struct",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // atributo_struct ::= RTEXTO SIGNOIGUAL CADENA 
            {
              Atributo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Atributo(cad, Atributo.Tipo.TEXTO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributo_struct",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // atributo_struct ::= RBORDE SIGNOIGUAL RTRUE 
            {
              Atributo RESULT =null;
		RESULT = new Atributo(true, Atributo.Tipo.BORDE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributo_struct",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // atributo_struct ::= RBORDE SIGNOIGUAL RFALSE 
            {
              Atributo RESULT =null;
		RESULT = new Atributo(false, Atributo.Tipo.BORDE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atributo_struct",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= expresion SIGNOMAS expresion 
            {
              Operacion RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion op1 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion op2 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(op1, op2, Operacion.Tipo.SUMA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= expresion SIGNOMENOS expresion 
            {
              Operacion RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion op1 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion op2 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(op1, op2, Operacion.Tipo.RESTA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= expresion SIGNODIVIDIDO expresion 
            {
              Operacion RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion op1 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion op2 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(op1, op2, Operacion.Tipo.DIVISION);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= expresion SIGNOPOR expresion 
            {
              Operacion RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion op1 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion op2 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(op1, op2, Operacion.Tipo.MULTIPLICACION);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= expresion MAYORQUE expresion 
            {
              Operacion RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion op1 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion op2 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(op1, op2, Operacion.Tipo.MAYORQUE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= expresion MENORQUE expresion 
            {
              Operacion RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion op1 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion op2 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(op1, op2, Operacion.Tipo.MENORQUE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= expresion MAYORIGUALQUE expresion 
            {
              Operacion RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion op1 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion op2 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(op1, op2, Operacion.Tipo.MAYORIGUALQUE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= expresion MENORIGUALQUE expresion 
            {
              Operacion RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion op1 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion op2 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(op1, op2, Operacion.Tipo.MENORIGUALQUE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= expresion IGUALQUE expresion 
            {
              Operacion RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion op1 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion op2 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(op1, op2, Operacion.Tipo.IGUALQUE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= expresion DISTINTOQUE expresion 
            {
              Operacion RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion op1 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion op2 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(op1, op2, Operacion.Tipo.DISTINTOQUE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= expresion OR expresion 
            {
              Operacion RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion op1 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion op2 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(op1, op2, Operacion.Tipo.OR);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= expresion AND expresion 
            {
              Operacion RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion op1 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion op2 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(op1, op2, Operacion.Tipo.AND);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= expresion PUNTO expresion 
            {
              Operacion RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion op1 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion op2 = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(op1, op2, Operacion.Tipo.CONCATENACION);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= NOT expresion 
            {
              Operacion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion op = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(op, Operacion.Tipo.NOT);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= PARENTA expresion PARENTC 
            {
              Operacion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion op = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = op;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion ::= CADENA 
            {
              Operacion RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(cad, Operacion.Tipo.CADENA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= ENTERO 
            {
              Operacion RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(Integer.valueOf(num), Operacion.Tipo.ENTERO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion ::= DECIMAL 
            {
              Operacion RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(Double.valueOf(num), Operacion.Tipo.DECIMAL);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion ::= DOLAR IDENTIFICADOR 
            {
              Operacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(id, Operacion.Tipo.IDENTIFICADOR);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresion ::= RTRUE 
            {
              Operacion RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(Boolean.valueOf(bool), Operacion.Tipo.BOOLEANO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresion ::= RFALSE 
            {
              Operacion RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operacion(Boolean.valueOf(bool), Operacion.Tipo.BOOLEANO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresion ::= NUMERAL IDENTIFICADOR PUNTO MGETANCHO PARENTA PARENTC 
            {
              Operacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		RESULT = new Operacion(id, Operacion.Tipo.GETANCHO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresion ::= NUMERAL IDENTIFICADOR PUNTO MGETALTO PARENTA PARENTC 
            {
              Operacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		RESULT = new Operacion(id, Operacion.Tipo.GETALTO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresion ::= NUMERAL IDENTIFICADOR PUNTO MGETPATH PARENTA PARENTC 
            {
              Operacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		RESULT = new Operacion(id, Operacion.Tipo.GETPATH);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresion ::= NUMERAL IDENTIFICADOR PUNTO MGETALINEACION PARENTA PARENTC 
            {
              Operacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		RESULT = new Operacion(id, Operacion.Tipo.GETALINEACION);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresion ::= NUMERAL IDENTIFICADOR PUNTO MGETCONTENIDO PARENTA PARENTC 
            {
              Operacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		RESULT = new Operacion(id, Operacion.Tipo.GETCONTENIDO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresion ::= NUMERAL IDENTIFICADOR PUNTO MGETTEXTO PARENTA PARENTC 
            {
              Operacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		RESULT = new Operacion(id, Operacion.Tipo.GETTEXTO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
