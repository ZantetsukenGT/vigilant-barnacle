/* The following code was generated by JFlex 1.7.0 */

package uweb.language;

import java_cup.runtime.*;
import java.util.LinkedList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>lexico</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SCRIPTHS = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\41\1\10\1\65\1\65\1\40\22\0\1\42\1\4\1\43"+
    "\1\47\1\46\1\0\1\62\1\0\1\52\1\53\1\7\1\63\1\60"+
    "\1\64\1\57\1\6\12\1\1\0\1\56\1\3\1\37\1\5\1\34"+
    "\1\0\1\17\1\20\1\11\1\36\1\21\1\26\1\31\1\35\1\16"+
    "\1\2\1\45\1\25\1\13\1\32\1\12\1\14\1\2\1\22\1\30"+
    "\1\23\1\24\2\2\1\33\2\2\1\54\1\0\1\55\1\0\1\2"+
    "\1\0\1\17\1\20\1\11\1\36\1\21\1\26\1\31\1\35\1\16"+
    "\1\2\1\45\1\25\1\13\1\32\1\12\1\14\1\2\1\22\1\30"+
    "\1\23\1\24\2\2\1\33\2\2\1\50\1\61\1\51\7\0\1\65"+
    "\73\0\1\2\7\0\1\2\3\0\1\2\5\0\1\2\6\0\1\2"+
    "\6\0\1\2\7\0\1\2\3\0\1\2\5\0\1\2\6\0\1\2"+
    "\65\0\2\15\115\0\1\27\u1ea8\0\1\65\1\65\u0100\0\1\44\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\12\1"+
    "\1\7\1\0\1\10\1\11\1\1\1\2\1\12\1\3"+
    "\1\13\1\4\1\5\1\14\1\12\1\1\5\12\1\1"+
    "\2\12\1\1\1\7\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\2\1\1\30"+
    "\1\31\6\0\1\32\16\0\1\33\1\0\1\34\1\35"+
    "\1\36\1\11\1\0\2\12\1\37\1\0\1\37\6\12"+
    "\1\0\2\12\1\40\1\41\1\42\1\43\26\0\1\44"+
    "\1\45\1\0\1\12\1\0\1\12\1\0\2\12\1\0"+
    "\4\12\1\0\2\12\5\0\1\46\2\0\1\47\7\0"+
    "\1\50\1\0\1\51\2\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\52\2\53\1\12\1\50\1\12\5\0\11\12"+
    "\1\54\6\0\1\55\1\56\1\57\2\0\1\60\1\61"+
    "\1\62\1\63\1\64\1\12\1\0\1\12\1\0\2\12"+
    "\1\63\6\0\13\12\2\0\1\65\1\0\1\66\2\0"+
    "\1\67\1\70\1\71\1\12\1\0\3\12\1\0\1\12"+
    "\1\0\1\12\1\0\1\12\7\0\11\12\1\0\4\12"+
    "\1\72\1\0\1\73\1\0\1\74\1\12\1\0\4\12"+
    "\1\0\1\12\1\0\1\12\2\75\1\0\1\76\1\0"+
    "\1\77\3\0\1\12\1\76\1\12\1\77\4\12\1\100"+
    "\1\0\1\12\1\101\2\12\1\102\1\103\1\0\1\12"+
    "\1\0\4\12\1\0\1\12\2\104\2\0\1\105\1\106"+
    "\1\107\2\12\1\105\1\106\1\107\1\12\1\0\1\12"+
    "\1\110\1\111\1\0\1\12\1\0\4\12\1\0\1\12"+
    "\2\0\3\12\1\0\1\12\1\112\1\12\1\0\1\12"+
    "\1\113\1\114\1\12\2\115\2\0\2\12\1\0\1\12"+
    "\1\0\2\12\2\116\1\117\1\120\2\0\2\12\1\0"+
    "\1\12\1\0\1\12\1\121\1\122\1\0\1\122\1\12"+
    "\2\123\1\0\1\12\2\124\2\125";

  private static int [] zzUnpackAction() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\154\0\154\0\154"+
    "\0\u010e\0\u0144\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288"+
    "\0\u02be\0\u02f4\0\154\0\u032a\0\154\0\154\0\u0360\0\u0396"+
    "\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\154\0\u04da\0\u0510"+
    "\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0"+
    "\0\u06f6\0\u072c\0\154\0\154\0\154\0\154\0\154\0\154"+
    "\0\154\0\154\0\154\0\154\0\154\0\u0762\0\u0798\0\154"+
    "\0\154\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\154"+
    "\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c"+
    "\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0360\0\154\0\u0bd0"+
    "\0\154\0\154\0\154\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\154"+
    "\0\u0cde\0\u03cc\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22"+
    "\0\u0e58\0\u0e8e\0\u0ec4\0\154\0\154\0\154\0\154\0\u0efa"+
    "\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa"+
    "\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a"+
    "\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\154\0\u0bd0\0\u139e"+
    "\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e"+
    "\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe"+
    "\0\u1734\0\u176a\0\u17a0\0\154\0\u17d6\0\u180c\0\154\0\u1842"+
    "\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\154\0\u19bc"+
    "\0\154\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36"+
    "\0\u03cc\0\154\0\u03cc\0\u1b6c\0\u03cc\0\u1ba2\0\u1bd8\0\u1c0e"+
    "\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe"+
    "\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\154\0\u1ecc\0\u1f02\0\u1f38"+
    "\0\u1f6e\0\u1fa4\0\u1fda\0\154\0\154\0\154\0\u2010\0\u2046"+
    "\0\154\0\u207c\0\154\0\154\0\154\0\u20b2\0\u20e8\0\u211e"+
    "\0\u2154\0\u218a\0\u21c0\0\u03cc\0\u21f6\0\u222c\0\u2262\0\u2298"+
    "\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448"+
    "\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2\0\154"+
    "\0\u25f8\0\154\0\u262e\0\u2664\0\154\0\154\0\154\0\u269a"+
    "\0\u26d0\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de\0\u2814\0\u284a"+
    "\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e\0\u29c4\0\u29fa"+
    "\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74\0\u2baa"+
    "\0\u2be0\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a"+
    "\0\u2d90\0\154\0\u2dc6\0\154\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e"+
    "\0\u2ed4\0\u2f0a\0\u2f40\0\u2f76\0\u2fac\0\u2fe2\0\154\0\u03cc"+
    "\0\u3018\0\154\0\u304e\0\154\0\u3084\0\u30ba\0\u30f0\0\u3126"+
    "\0\u03cc\0\u315c\0\u03cc\0\u3192\0\u31c8\0\u31fe\0\u3234\0\u03cc"+
    "\0\u326a\0\u32a0\0\u03cc\0\u32d6\0\u330c\0\154\0\154\0\u3342"+
    "\0\u3378\0\u33ae\0\u33e4\0\u341a\0\u3450\0\u3486\0\u34bc\0\u34f2"+
    "\0\154\0\u03cc\0\u3528\0\u355e\0\154\0\154\0\154\0\u3594"+
    "\0\u35ca\0\u03cc\0\u03cc\0\u03cc\0\u3600\0\u3636\0\u366c\0\u03cc"+
    "\0\u03cc\0\u36a2\0\u36d8\0\u370e\0\u3744\0\u377a\0\u37b0\0\u37e6"+
    "\0\u381c\0\u3852\0\u3888\0\u38be\0\u38f4\0\u392a\0\u3960\0\u3996"+
    "\0\u39cc\0\154\0\u3a02\0\u3a38\0\u3a6e\0\u03cc\0\u03cc\0\u3aa4"+
    "\0\154\0\u03cc\0\u3ada\0\u3b10\0\u3b46\0\u3b7c\0\u3bb2\0\u3be8"+
    "\0\u3c1e\0\u3c54\0\u3c8a\0\154\0\u03cc\0\u03cc\0\u03cc\0\u3cc0"+
    "\0\u3cf6\0\u3d2c\0\u3d62\0\u3d98\0\u3dce\0\u3e04\0\u3e3a\0\u03cc"+
    "\0\154\0\u3e70\0\u03cc\0\u3ea6\0\154\0\u03cc\0\u3edc\0\u3f12"+
    "\0\154\0\u03cc\0\154\0\u03cc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\3\1\5\1\3\1\6\1\7\1\3"+
    "\1\10\1\11\2\3\1\12\2\13\1\14\1\15\1\16"+
    "\1\3\1\17\2\3\1\20\2\21\3\3\1\22\2\3"+
    "\1\23\1\24\1\25\1\26\1\27\21\3\1\0\1\3"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\10"+
    "\1\37\3\31\1\40\1\41\2\31\1\42\1\43\1\44"+
    "\2\31\1\45\1\46\1\47\1\50\2\31\1\51\2\31"+
    "\1\52\1\24\1\25\1\26\1\27\1\3\1\31\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\70\0\1\4"+
    "\70\0\1\72\73\0\1\73\4\0\1\74\4\0\1\75"+
    "\60\0\1\76\61\0\1\77\22\0\1\100\54\0\1\101"+
    "\4\0\1\102\45\0\1\103\102\0\2\104\52\0\2\105"+
    "\1\106\1\0\1\107\1\110\55\0\1\111\2\0\2\112"+
    "\1\113\65\0\1\114\103\0\1\115\40\0\1\10\55\0"+
    "\10\116\1\0\27\116\1\0\2\116\1\117\22\116\1\0"+
    "\1\30\55\0\1\120\7\0\2\31\6\0\4\31\1\0"+
    "\11\31\1\0\4\31\1\0\2\31\6\0\1\31\57\0"+
    "\1\121\65\0\1\122\65\0\1\123\34\0\1\124\1\125"+
    "\57\0\2\31\6\0\4\31\1\0\4\31\1\126\2\31"+
    "\1\127\1\31\1\0\4\31\1\0\2\31\6\0\1\31"+
    "\46\0\1\130\3\0\1\131\34\0\2\31\6\0\4\31"+
    "\1\0\10\31\1\132\1\0\2\31\1\133\1\31\1\0"+
    "\2\31\6\0\1\31\21\0\2\31\6\0\1\134\3\31"+
    "\1\0\7\31\1\135\1\31\1\0\4\31\1\0\2\31"+
    "\6\0\1\31\21\0\2\31\6\0\4\31\1\0\3\31"+
    "\1\136\5\31\1\0\4\31\1\0\2\31\6\0\1\31"+
    "\21\0\2\31\6\0\4\31\1\0\4\31\1\137\4\31"+
    "\1\0\4\31\1\0\2\31\6\0\1\31\21\0\2\31"+
    "\6\0\4\31\1\0\1\31\1\140\7\31\1\0\4\31"+
    "\1\0\2\31\6\0\1\31\41\0\1\141\45\0\2\31"+
    "\6\0\4\31\1\0\3\31\1\142\5\31\1\0\4\31"+
    "\1\0\2\31\6\0\1\31\21\0\2\31\6\0\4\31"+
    "\1\0\3\31\1\143\5\31\1\0\4\31\1\0\2\31"+
    "\6\0\1\31\25\0\1\144\117\0\1\145\107\0\1\146"+
    "\66\0\1\147\3\0\4\72\1\150\61\72\13\0\1\151"+
    "\11\0\1\152\60\0\1\153\66\0\1\154\66\0\1\155"+
    "\1\156\61\0\1\157\63\0\2\160\4\0\1\161\53\0"+
    "\1\162\76\0\1\163\1\164\56\0\1\165\74\0\1\166"+
    "\62\0\1\167\100\0\1\170\56\0\1\171\73\0\1\172"+
    "\60\0\1\173\65\0\1\174\65\0\1\175\67\0\2\176"+
    "\36\0\1\177\64\0\10\124\1\0\27\124\1\0\25\124"+
    "\7\125\1\200\56\125\1\0\2\31\6\0\4\31\1\0"+
    "\3\31\1\201\5\31\1\0\4\31\1\0\2\31\6\0"+
    "\1\31\21\0\2\31\6\0\4\31\1\202\1\203\10\31"+
    "\1\0\4\31\1\0\2\31\6\0\1\31\47\0\2\204"+
    "\36\0\2\31\6\0\4\31\1\0\11\31\1\204\1\205"+
    "\3\31\1\0\2\31\6\0\1\31\21\0\2\31\6\0"+
    "\4\31\1\0\11\31\1\0\4\31\1\0\1\206\1\31"+
    "\6\0\1\31\21\0\2\31\6\0\4\31\1\0\11\31"+
    "\1\207\1\210\3\31\1\0\2\31\6\0\1\31\21\0"+
    "\2\31\6\0\3\31\1\211\1\0\11\31\1\0\4\31"+
    "\1\0\2\31\6\0\1\31\21\0\2\31\6\0\4\31"+
    "\1\0\6\31\1\212\2\31\1\0\4\31\1\0\2\31"+
    "\6\0\1\31\21\0\2\31\6\0\4\31\1\0\7\31"+
    "\1\213\1\31\1\0\4\31\1\0\2\31\6\0\1\31"+
    "\43\0\1\214\43\0\2\31\6\0\4\31\1\0\5\31"+
    "\1\215\3\31\1\0\4\31\1\0\2\31\6\0\1\31"+
    "\21\0\2\31\6\0\4\31\1\0\5\31\1\216\3\31"+
    "\1\0\4\31\1\0\2\31\6\0\1\31\25\0\1\26"+
    "\74\0\1\217\75\0\1\220\62\0\1\221\66\0\1\222"+
    "\65\0\1\223\100\0\1\224\61\0\1\225\66\0\1\226"+
    "\45\0\1\227\110\0\1\230\66\0\1\231\41\0\1\232"+
    "\72\0\1\233\72\0\1\234\66\0\1\235\63\0\1\236"+
    "\63\0\1\237\102\0\1\240\46\0\1\241\75\0\2\242"+
    "\60\0\1\243\50\0\1\26\60\0\2\31\6\0\4\31"+
    "\1\0\1\31\1\244\7\31\1\0\4\31\1\0\2\31"+
    "\6\0\1\31\31\0\1\245\55\0\2\31\6\0\1\246"+
    "\3\31\1\0\11\31\1\0\4\31\1\0\2\31\6\0"+
    "\1\31\41\0\1\247\45\0\2\31\6\0\4\31\1\0"+
    "\3\31\1\250\5\31\1\0\4\31\1\0\2\31\6\0"+
    "\1\31\21\0\2\31\6\0\1\31\1\251\2\31\1\0"+
    "\11\31\1\0\4\31\1\0\2\31\6\0\1\31\41\0"+
    "\1\252\45\0\2\31\6\0\4\31\1\0\3\31\1\253"+
    "\5\31\1\0\4\31\1\0\2\31\6\0\1\31\21\0"+
    "\2\31\6\0\4\31\1\0\3\31\1\254\5\31\1\0"+
    "\4\31\1\0\2\31\6\0\1\31\21\0\2\31\6\0"+
    "\4\31\1\0\3\31\1\255\5\31\1\0\4\31\1\0"+
    "\2\31\6\0\1\31\21\0\2\31\6\0\4\31\1\0"+
    "\11\31\1\242\1\256\3\31\1\0\2\31\6\0\1\31"+
    "\31\0\1\257\2\0\1\260\2\0\1\261\1\262\2\0"+
    "\1\263\43\0\2\31\6\0\1\264\2\31\1\265\1\0"+
    "\1\31\1\266\1\267\2\31\1\270\3\31\1\0\4\31"+
    "\1\0\2\31\6\0\1\31\21\0\2\31\6\0\1\271"+
    "\2\31\1\272\1\0\1\31\1\273\3\31\1\274\3\31"+
    "\1\0\4\31\1\0\2\31\6\0\1\31\35\0\2\275"+
    "\62\0\1\276\63\0\1\277\70\0\1\300\70\0\1\301"+
    "\67\0\1\302\65\0\1\303\56\0\1\304\74\0\1\305"+
    "\76\0\1\306\44\0\1\307\101\0\1\310\57\0\1\311"+
    "\60\0\1\312\65\0\1\313\74\0\1\314\56\0\1\315"+
    "\54\0\2\31\6\0\4\31\1\0\4\31\1\316\4\31"+
    "\1\0\4\31\1\0\2\31\6\0\1\31\64\0\2\317"+
    "\21\0\2\31\6\0\4\31\1\0\11\31\1\0\4\31"+
    "\1\0\2\31\5\0\1\317\1\320\42\0\1\321\44\0"+
    "\2\31\6\0\4\31\1\0\4\31\1\322\4\31\1\0"+
    "\4\31\1\0\2\31\6\0\1\31\21\0\2\31\6\0"+
    "\4\31\1\0\5\31\1\323\3\31\1\0\4\31\1\0"+
    "\2\31\6\0\1\31\21\0\2\31\6\0\4\31\1\0"+
    "\3\31\1\324\5\31\1\0\4\31\1\0\2\31\6\0"+
    "\1\31\32\0\1\325\72\0\1\326\73\0\1\327\4\0"+
    "\1\330\45\0\1\331\74\0\1\332\45\0\2\31\6\0"+
    "\1\31\1\333\2\31\1\0\11\31\1\0\4\31\1\0"+
    "\2\31\6\0\1\31\21\0\2\31\6\0\4\31\1\0"+
    "\1\31\1\334\7\31\1\0\4\31\1\0\2\31\6\0"+
    "\1\31\21\0\2\31\6\0\4\31\1\0\7\31\1\335"+
    "\1\31\1\0\2\31\1\336\1\31\1\0\2\31\6\0"+
    "\1\31\21\0\2\31\6\0\1\31\1\337\2\31\1\0"+
    "\11\31\1\0\4\31\1\0\2\31\6\0\1\31\21\0"+
    "\2\31\6\0\4\31\1\0\3\31\1\340\5\31\1\0"+
    "\4\31\1\0\2\31\6\0\1\31\21\0\2\31\6\0"+
    "\1\31\1\341\2\31\1\0\11\31\1\0\4\31\1\0"+
    "\2\31\6\0\1\31\21\0\2\31\6\0\4\31\1\0"+
    "\1\31\1\342\7\31\1\0\4\31\1\0\2\31\6\0"+
    "\1\31\21\0\2\31\6\0\4\31\1\0\7\31\1\343"+
    "\1\31\1\0\2\31\1\344\1\31\1\0\2\31\6\0"+
    "\1\31\21\0\2\31\6\0\4\31\1\0\3\31\1\345"+
    "\5\31\1\0\4\31\1\0\2\31\6\0\1\31\52\0"+
    "\1\346\54\0\1\347\56\0\1\350\101\0\1\351\71\0"+
    "\1\352\52\0\1\353\63\0\2\354\61\0\1\355\72\0"+
    "\1\356\1\357\46\0\2\31\6\0\3\31\1\360\1\361"+
    "\1\362\1\31\1\363\2\31\1\364\3\31\1\0\4\31"+
    "\1\0\2\31\6\0\1\31\40\0\1\365\46\0\2\31"+
    "\6\0\4\31\1\0\2\31\1\366\6\31\1\0\4\31"+
    "\1\0\2\31\6\0\1\31\43\0\1\367\43\0\2\31"+
    "\6\0\4\31\1\0\5\31\1\370\3\31\1\0\4\31"+
    "\1\0\2\31\6\0\1\31\21\0\2\31\6\0\4\31"+
    "\1\371\1\372\10\31\1\0\4\31\1\0\2\31\6\0"+
    "\1\31\52\0\1\373\56\0\1\374\57\0\2\375\4\0"+
    "\1\376\53\0\1\377\76\0\1\u0100\76\0\1\u0101\33\0"+
    "\2\31\6\0\4\31\1\0\11\31\1\0\2\31\1\u0102"+
    "\1\31\1\0\2\31\6\0\1\31\21\0\2\31\6\0"+
    "\4\31\1\0\5\31\1\u0103\3\31\1\0\4\31\1\0"+
    "\2\31\6\0\1\31\21\0\2\31\6\0\4\31\1\375"+
    "\1\u0104\4\31\1\u0105\3\31\1\0\4\31\1\0\2\31"+
    "\6\0\1\31\21\0\2\31\6\0\1\u0106\3\31\1\0"+
    "\11\31\1\0\4\31\1\0\2\31\6\0\1\31\21\0"+
    "\2\31\6\0\4\31\1\0\4\31\1\u0107\4\31\1\0"+
    "\4\31\1\0\2\31\6\0\1\31\21\0\2\31\6\0"+
    "\4\31\1\0\11\31\1\0\3\31\1\u0108\1\0\2\31"+
    "\6\0\1\31\21\0\2\31\6\0\4\31\1\0\11\31"+
    "\1\0\2\31\1\u0109\1\31\1\0\2\31\6\0\1\31"+
    "\21\0\2\31\6\0\4\31\1\0\5\31\1\u010a\3\31"+
    "\1\0\4\31\1\0\2\31\6\0\1\31\21\0\2\31"+
    "\6\0\4\31\1\u010b\1\u010c\4\31\1\u010d\3\31\1\0"+
    "\4\31\1\0\2\31\6\0\1\31\21\0\2\31\6\0"+
    "\1\u010e\3\31\1\0\11\31\1\0\4\31\1\0\2\31"+
    "\6\0\1\31\21\0\2\31\6\0\4\31\1\0\11\31"+
    "\1\0\3\31\1\u010f\1\0\2\31\6\0\1\31\37\0"+
    "\1\u0110\70\0\1\u0111\55\0\1\u0112\64\0\1\u0113\66\0"+
    "\1\u0114\54\0\2\31\6\0\4\31\1\0\1\31\1\u0115"+
    "\7\31\1\0\4\31\1\0\2\31\6\0\1\31\33\0"+
    "\1\u0116\53\0\2\31\6\0\2\31\1\u0117\1\31\1\0"+
    "\11\31\1\0\4\31\1\0\2\31\6\0\1\31\21\0"+
    "\2\31\6\0\1\31\1\u0118\2\31\1\0\11\31\1\0"+
    "\4\31\1\0\2\31\6\0\1\31\21\0\2\31\6\0"+
    "\4\31\1\0\1\31\1\u0119\1\31\1\u011a\5\31\1\0"+
    "\4\31\1\0\2\31\6\0\1\31\32\0\1\u011b\54\0"+
    "\2\31\6\0\1\31\1\u011c\2\31\1\0\11\31\1\0"+
    "\4\31\1\0\2\31\6\0\1\31\37\0\1\u011d\47\0"+
    "\2\31\6\0\4\31\1\0\1\31\1\u011e\7\31\1\0"+
    "\4\31\1\0\2\31\6\0\1\31\42\0\1\u011f\44\0"+
    "\2\31\6\0\4\31\1\0\4\31\1\u0120\4\31\1\0"+
    "\4\31\1\0\2\31\6\0\1\31\43\0\1\u0121\77\0"+
    "\1\u0122\62\0\1\u0123\45\0\1\u0124\110\0\1\u0125\66\0"+
    "\1\u0126\52\0\1\u0127\43\0\2\31\6\0\4\31\1\0"+
    "\5\31\1\u0128\3\31\1\0\4\31\1\0\2\31\6\0"+
    "\1\31\21\0\2\31\6\0\4\31\1\0\11\31\1\0"+
    "\4\31\1\0\1\u0129\1\31\6\0\1\31\21\0\2\31"+
    "\6\0\4\31\1\0\11\31\1\0\2\31\1\u012a\1\31"+
    "\1\0\2\31\6\0\1\31\21\0\2\31\6\0\1\31"+
    "\1\u012b\2\31\1\0\11\31\1\0\4\31\1\0\2\31"+
    "\6\0\1\31\21\0\2\31\6\0\4\31\1\0\11\31"+
    "\1\0\4\31\1\0\1\u012c\1\31\6\0\1\31\21\0"+
    "\2\31\6\0\4\31\1\0\11\31\1\0\4\31\1\0"+
    "\1\31\1\u012d\6\0\1\31\21\0\2\31\6\0\4\31"+
    "\1\0\5\31\1\u012e\3\31\1\0\4\31\1\0\2\31"+
    "\6\0\1\31\21\0\2\31\6\0\4\31\1\0\5\31"+
    "\1\u012f\3\31\1\0\4\31\1\0\2\31\6\0\1\31"+
    "\21\0\2\31\6\0\4\31\1\0\11\31\1\0\4\31"+
    "\1\0\1\u0130\1\31\6\0\1\31\52\0\1\u0131\34\0"+
    "\2\31\6\0\4\31\1\0\11\31\1\0\2\31\1\u0132"+
    "\1\31\1\0\2\31\6\0\1\31\21\0\2\31\6\0"+
    "\1\31\1\u0133\2\31\1\0\11\31\1\0\4\31\1\0"+
    "\2\31\6\0\1\31\21\0\2\31\6\0\4\31\1\0"+
    "\11\31\1\0\4\31\1\0\1\u0134\1\31\6\0\1\31"+
    "\21\0\2\31\6\0\4\31\1\0\5\31\1\u0135\3\31"+
    "\1\0\4\31\1\0\2\31\6\0\1\31\31\0\1\u0136"+
    "\73\0\1\u0137\63\0\2\u0138\50\0\2\31\6\0\4\31"+
    "\1\0\4\31\1\u0139\4\31\1\0\4\31\1\0\2\31"+
    "\6\0\1\31\37\0\1\u013a\47\0\2\31\6\0\4\31"+
    "\1\0\1\31\1\u013b\7\31\1\0\4\31\1\0\2\31"+
    "\6\0\1\31\21\0\2\31\6\0\4\31\1\0\5\31"+
    "\1\u013c\3\31\1\0\4\31\1\0\2\31\6\0\1\31"+
    "\21\0\2\31\6\0\4\31\1\0\2\31\1\u013d\6\31"+
    "\1\0\4\31\1\0\2\31\6\0\1\31\21\0\2\31"+
    "\6\0\4\31\1\0\11\31\1\0\3\31\1\u013e\1\0"+
    "\2\31\6\0\1\31\43\0\1\u013f\43\0\2\31\6\0"+
    "\4\31\1\0\5\31\1\u0140\3\31\1\0\4\31\1\0"+
    "\2\31\6\0\1\31\42\0\1\u0141\44\0\2\31\6\0"+
    "\4\31\1\0\4\31\1\u0142\4\31\1\0\4\31\1\0"+
    "\2\31\6\0\1\31\41\0\1\u0143\65\0\1\u0144\56\0"+
    "\1\u0145\74\0\1\u0146\56\0\1\u0147\54\0\2\31\6\0"+
    "\4\31\1\0\3\31\1\u0148\5\31\1\0\4\31\1\0"+
    "\2\31\6\0\1\31\21\0\2\31\6\0\4\31\1\0"+
    "\3\31\1\u0149\5\31\1\0\4\31\1\0\2\31\6\0"+
    "\1\31\21\0\2\31\6\0\1\31\1\u014a\2\31\1\0"+
    "\11\31\1\0\4\31\1\0\2\31\6\0\1\31\21\0"+
    "\2\31\6\0\4\31\1\0\3\31\1\u014b\5\31\1\0"+
    "\4\31\1\0\2\31\6\0\1\31\21\0\2\31\6\0"+
    "\1\31\1\u014c\2\31\1\0\11\31\1\0\4\31\1\0"+
    "\2\31\6\0\1\31\21\0\2\31\6\0\4\31\1\0"+
    "\3\31\1\u014d\5\31\1\0\4\31\1\0\2\31\6\0"+
    "\1\31\41\0\1\u014e\45\0\2\31\6\0\4\31\1\0"+
    "\3\31\1\u014f\5\31\1\0\4\31\1\0\2\31\6\0"+
    "\1\31\21\0\2\31\6\0\1\31\1\u0150\2\31\1\0"+
    "\11\31\1\0\4\31\1\0\2\31\6\0\1\31\21\0"+
    "\2\31\6\0\1\31\1\u0151\2\31\1\0\11\31\1\0"+
    "\4\31\1\0\2\31\6\0\1\31\32\0\1\u0152\54\0"+
    "\2\31\6\0\4\31\1\0\4\31\1\u0153\4\31\1\0"+
    "\4\31\1\0\2\31\6\0\1\31\51\0\1\u0154\35\0"+
    "\2\31\6\0\4\31\1\0\11\31\1\0\1\31\1\u0155"+
    "\2\31\1\0\2\31\6\0\1\31\21\0\2\31\6\0"+
    "\1\31\1\u0156\2\31\1\0\11\31\1\0\4\31\1\0"+
    "\2\31\6\0\1\31\21\0\2\31\6\0\4\31\1\0"+
    "\7\31\1\u0157\1\31\1\0\4\31\1\0\2\31\6\0"+
    "\1\31\21\0\2\31\6\0\4\31\1\0\5\31\1\u0158"+
    "\3\31\1\0\4\31\1\0\2\31\6\0\1\31\32\0"+
    "\1\u0159\54\0\2\31\6\0\1\31\1\u015a\2\31\1\0"+
    "\11\31\1\0\4\31\1\0\2\31\6\0\1\31\52\0"+
    "\1\u015b\52\0\1\u015c\47\0\2\31\6\0\4\31\1\0"+
    "\11\31\1\0\2\31\1\u015d\1\31\1\0\2\31\6\0"+
    "\1\31\21\0\2\31\6\0\4\31\1\0\1\31\1\u015e"+
    "\7\31\1\0\4\31\1\0\2\31\6\0\1\31\21\0"+
    "\2\31\6\0\4\31\1\0\11\31\1\0\2\31\1\u015f"+
    "\1\31\1\0\2\31\6\0\1\31\37\0\1\u0160\47\0"+
    "\2\31\6\0\4\31\1\0\1\31\1\u0161\7\31\1\0"+
    "\4\31\1\0\2\31\6\0\1\31\52\0\1\u0162\34\0"+
    "\2\31\6\0\4\31\1\0\1\31\1\u0163\7\31\1\0"+
    "\4\31\1\0\2\31\6\0\1\31\41\0\1\u0164\45\0"+
    "\2\31\6\0\4\31\1\0\3\31\1\u0165\5\31\1\0"+
    "\4\31\1\0\2\31\6\0\1\31\21\0\2\31\6\0"+
    "\4\31\1\0\11\31\1\0\2\31\1\u0166\1\31\1\0"+
    "\2\31\6\0\1\31\21\0\2\31\6\0\4\31\1\0"+
    "\1\31\1\u0167\7\31\1\0\4\31\1\0\2\31\6\0"+
    "\1\31\21\0\2\31\6\0\1\31\1\u0168\2\31\1\0"+
    "\11\31\1\0\4\31\1\0\2\31\6\0\1\31\52\0"+
    "\1\u0169\34\0\2\31\6\0\4\31\1\0\11\31\1\0"+
    "\2\31\1\u016a\1\31\1\0\2\31\6\0\1\31\35\0"+
    "\2\u016b\60\0\1\u016c\55\0\2\31\6\0\4\31\1\u016b"+
    "\1\u016d\10\31\1\0\4\31\1\0\2\31\6\0\1\31"+
    "\21\0\2\31\6\0\1\u016e\3\31\1\0\11\31\1\0"+
    "\4\31\1\0\2\31\6\0\1\31\21\0\2\31\6\0"+
    "\4\31\1\u016f\1\u0170\10\31\1\0\4\31\1\0\2\31"+
    "\6\0\1\31\31\0\1\u0171\55\0\2\31\6\0\1\u0172"+
    "\3\31\1\0\11\31\1\0\4\31\1\0\2\31\6\0"+
    "\1\31\21\0\2\31\6\0\4\31\1\0\10\31\1\u0173"+
    "\1\0\4\31\1\0\2\31\6\0\1\31\52\0\1\u0174"+
    "\34\0\2\31\6\0\4\31\1\0\11\31\1\0\2\31"+
    "\1\u0175\1\31\1\0\2\31\6\0\1\31\21\0\2\31"+
    "\6\0\4\31\1\0\1\31\1\u0176\1\u0177\6\31\1\0"+
    "\4\31\1\0\2\31\6\0\1\31\56\0\1\u0178\44\0"+
    "\2\u0179\50\0\2\31\6\0\4\31\1\0\11\31\1\0"+
    "\4\31\1\0\1\31\1\u017a\6\0\1\31\21\0\2\31"+
    "\6\0\4\31\1\u0179\1\u017b\10\31\1\0\4\31\1\0"+
    "\2\31\6\0\1\31\56\0\1\u017c\30\0\2\31\6\0"+
    "\4\31\1\0\11\31\1\0\4\31\1\0\1\31\1\u017d"+
    "\6\0\1\31\35\0\2\u017e\50\0\2\31\6\0\4\31"+
    "\1\u017e\1\u017f\10\31\1\0\4\31\1\0\2\31\6\0"+
    "\1\31\21\0\2\31\6\0\1\31\1\u0180\2\31\1\0"+
    "\11\31\1\0\4\31\1\0\2\31\6\0\1\31\32\0"+
    "\1\u0181\65\0\1\u0182\54\0\2\31\6\0\1\31\1\u0183"+
    "\2\31\1\0\11\31\1\0\4\31\1\0\2\31\6\0"+
    "\1\31\21\0\2\31\6\0\1\31\1\u0184\2\31\1\0"+
    "\11\31\1\0\4\31\1\0\2\31\6\0\1\31\32\0"+
    "\1\u0185\54\0\2\31\6\0\1\31\1\u0186\2\31\1\0"+
    "\11\31\1\0\4\31\1\0\2\31\6\0\1\31\32\0"+
    "\1\u0187\54\0\2\31\6\0\1\31\1\u0188\2\31\1\0"+
    "\11\31\1\0\4\31\1\0\2\31\6\0\1\31\52\0"+
    "\1\u0189\34\0\2\31\6\0\4\31\1\0\11\31\1\0"+
    "\2\31\1\u018a\1\31\1\0\2\31\6\0\1\31\52\0"+
    "\1\u018b\34\0\2\31\6\0\4\31\1\0\11\31\1\0"+
    "\2\31\1\u018c\1\31\1\0\2\31\6\0\1\31\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\3\11\12\1\1\11\1\0\2\11"+
    "\7\1\1\11\14\1\13\11\2\1\2\11\6\0\1\11"+
    "\16\0\1\11\1\0\3\11\1\1\1\0\2\1\1\11"+
    "\1\0\7\1\1\0\2\1\4\11\26\0\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\1\0\4\1"+
    "\1\0\2\1\5\0\1\11\2\0\1\11\7\0\1\11"+
    "\1\0\1\11\2\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\11\4\1\5\0\11\1\1\11\6\0\3\11\2\0"+
    "\1\11\1\1\3\11\1\1\1\0\1\1\1\0\3\1"+
    "\6\0\13\1\2\0\1\11\1\0\1\11\2\0\3\11"+
    "\1\1\1\0\3\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\7\0\11\1\1\0\5\1\1\0\1\11\1\0"+
    "\1\11\1\1\1\0\4\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\11\1\0\1\11\3\0\11\1"+
    "\1\0\4\1\2\11\1\0\1\1\1\0\4\1\1\0"+
    "\1\1\1\11\1\1\2\0\3\11\6\1\1\0\3\1"+
    "\1\0\1\1\1\0\4\1\1\0\1\1\2\0\3\1"+
    "\1\0\1\1\1\11\1\1\1\0\4\1\1\11\1\1"+
    "\2\0\2\1\1\0\1\1\1\0\2\1\1\11\3\1"+
    "\2\0\2\1\1\0\1\1\1\0\2\1\1\11\1\0"+
    "\2\1\1\11\1\1\1\0\1\1\1\11\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    final boolean debug = false;
    public LinkedList<ErrorAnalisis> errores = new LinkedList<>();
    public LinkedList<SymbolAnalisis> simbolos = new LinkedList<>();

    private Symbol processSymbol(Symbol t)
    {
        if(debug)
            System.out.println("Tipo: " + sym.terminalNames[t.sym] + ", Lexema: " + t.value.toString() + ", Linea: " + t.left + ", Columna: " + t.right);
        simbolos.add(new SymbolAnalisis(sym.terminalNames[t.sym], t.value.toString(), "", t.left, t.right));
        return t;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
      yyline = 1;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 272) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { ErrorAnalisis nuevo = new ErrorAnalisis("Error Léxico", yytext(), "símbolo no válido", yyline, yycolumn);
        errores.add(nuevo);
            } 
            // fall through
          case 86: break;
          case 2: 
            { return processSymbol(new Symbol(sym.ENTERO,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 87: break;
          case 3: 
            { return processSymbol(new Symbol(sym.MENORQUE,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 88: break;
          case 4: 
            { return processSymbol(new Symbol(sym.MAYORQUE,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 89: break;
          case 5: 
            { return processSymbol(new Symbol(sym.SIGNODIVIDIDO,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 90: break;
          case 6: 
            { yycolumn = 1;
            } 
            // fall through
          case 91: break;
          case 7: 
            { return processSymbol(new Symbol(sym.SIGNOIGUAL,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 92: break;
          case 8: 
            { yycolumn = 4 - yycolumn%4 + yycolumn - 1;
            } 
            // fall through
          case 93: break;
          case 9: 
            { 
            } 
            // fall through
          case 94: break;
          case 10: 
            { return processSymbol(new Symbol(sym.IDENTIFICADOR,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 95: break;
          case 11: 
            { return processSymbol(new Symbol(sym.NOT,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 96: break;
          case 12: 
            { return processSymbol(new Symbol(sym.SIGNOPOR,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 97: break;
          case 13: 
            { return processSymbol(new Symbol(sym.DOLAR,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 98: break;
          case 14: 
            { return processSymbol(new Symbol(sym.NUMERAL,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 99: break;
          case 15: 
            { return processSymbol(new Symbol(sym.LLAVEA,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 100: break;
          case 16: 
            { return processSymbol(new Symbol(sym.LLAVEC,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 101: break;
          case 17: 
            { return processSymbol(new Symbol(sym.PARENTA,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 102: break;
          case 18: 
            { return processSymbol(new Symbol(sym.PARENTC,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 103: break;
          case 19: 
            { return processSymbol(new Symbol(sym.CORCHETEA,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 104: break;
          case 20: 
            { return processSymbol(new Symbol(sym.CORCHETEC,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 105: break;
          case 21: 
            { return processSymbol(new Symbol(sym.PYCOMA,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 106: break;
          case 22: 
            { return processSymbol(new Symbol(sym.PUNTO,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 107: break;
          case 23: 
            { return processSymbol(new Symbol(sym.COMA,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 108: break;
          case 24: 
            { return processSymbol(new Symbol(sym.SIGNOMAS,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 109: break;
          case 25: 
            { return processSymbol(new Symbol(sym.SIGNOMENOS,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 110: break;
          case 26: 
            { return processSymbol(new Symbol(sym.RID,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 111: break;
          case 27: 
            { return processSymbol(new Symbol(sym.CADENA,yyline,yycolumn,yytext().replaceAll("\"","")));
            } 
            // fall through
          case 112: break;
          case 28: 
            { return processSymbol(new Symbol(sym.MENORIGUALQUE,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 113: break;
          case 29: 
            { return processSymbol(new Symbol(sym.DISTINTOQUE,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 114: break;
          case 30: 
            { return processSymbol(new Symbol(sym.MAYORIGUALQUE,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 115: break;
          case 31: 
            { return processSymbol(new Symbol(sym.RIF,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 116: break;
          case 32: 
            { yybegin(YYINITIAL); return processSymbol(new Symbol(sym.ENDHS,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 117: break;
          case 33: 
            { return processSymbol(new Symbol(sym.IGUALQUE,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 118: break;
          case 34: 
            { return processSymbol(new Symbol(sym.OR,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 119: break;
          case 35: 
            { return processSymbol(new Symbol(sym.AND,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 120: break;
          case 36: 
            { yybegin(SCRIPTHS); return processSymbol(new Symbol(sym.RHS,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 121: break;
          case 37: 
            { return processSymbol(new Symbol(sym.DECIMAL,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 122: break;
          case 38: 
            { return processSymbol(new Symbol(sym.RPATH,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 123: break;
          case 39: 
            { return processSymbol(new Symbol(sym.RALTO,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 124: break;
          case 40: 
            { return processSymbol(new Symbol(sym.RTRUE,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 125: break;
          case 41: 
            { return processSymbol(new Symbol(sym.RFILA,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 126: break;
          case 42: 
            { return processSymbol(new Symbol(sym.ECHO,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 127: break;
          case 43: 
            { return processSymbol(new Symbol(sym.RELSE,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 128: break;
          case 44: 
            { return processSymbol(new Symbol(sym.RCOMPI,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 129: break;
          case 45: 
            { return processSymbol(new Symbol(sym.RANCHO,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 130: break;
          case 46: 
            { return processSymbol(new Symbol(sym.RBORDE,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 131: break;
          case 47: 
            { return processSymbol(new Symbol(sym.RBOTON,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 132: break;
          case 48: 
            { return processSymbol(new Symbol(sym.RTABLA,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 133: break;
          case 49: 
            { return processSymbol(new Symbol(sym.RTEXTO,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 134: break;
          case 50: 
            { return processSymbol(new Symbol(sym.RFONDO,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 135: break;
          case 51: 
            { return processSymbol(new Symbol(sym.RFALSE,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 136: break;
          case 52: 
            { return processSymbol(new Symbol(sym.RSALTO,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 137: break;
          case 53: 
            { return processSymbol(new Symbol(sym.RCUERPO,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 138: break;
          case 54: 
            { return processSymbol(new Symbol(sym.RIMAGEN,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 139: break;
          case 55: 
            { return processSymbol(new Symbol(sym.RTITULO,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 140: break;
          case 56: 
            { return processSymbol(new Symbol(sym.RTEXTOA,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 141: break;
          case 57: 
            { return processSymbol(new Symbol(sym.RTEXTOB,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 142: break;
          case 58: 
            { return processSymbol(new Symbol(sym.RCOLUMNA,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 143: break;
          case 59: 
            { return processSymbol(new Symbol(sym.RPARRAFO,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 144: break;
          case 60: 
            { return processSymbol(new Symbol(sym.RESPACIO,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 145: break;
          case 61: 
            { return processSymbol(new Symbol(sym.MREPETIR,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 146: break;
          case 62: 
            { return processSymbol(new Symbol(sym.MSETPATH,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 147: break;
          case 63: 
            { return processSymbol(new Symbol(sym.MSETALTO,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 148: break;
          case 64: 
            { return processSymbol(new Symbol(sym.MGETPATH,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 149: break;
          case 65: 
            { return processSymbol(new Symbol(sym.MGETALTO,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 150: break;
          case 66: 
            { return processSymbol(new Symbol(sym.RCOLUMNAC,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 151: break;
          case 67: 
            { return processSymbol(new Symbol(sym.RCABECERA,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 152: break;
          case 68: 
            { return processSymbol(new Symbol(sym.MINSERTAR,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 153: break;
          case 69: 
            { return processSymbol(new Symbol(sym.MSETANCHO,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 154: break;
          case 70: 
            { return processSymbol(new Symbol(sym.MSETBORDE,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 155: break;
          case 71: 
            { return processSymbol(new Symbol(sym.MSETTEXTO,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 156: break;
          case 72: 
            { return processSymbol(new Symbol(sym.MGETANCHO,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 157: break;
          case 73: 
            { return processSymbol(new Symbol(sym.MGETTEXTO,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 158: break;
          case 74: 
            { return processSymbol(new Symbol(sym.RALINEACION,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 159: break;
          case 75: 
            { return processSymbol(new Symbol(sym.MCREARBOTON,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 160: break;
          case 76: 
            { return processSymbol(new Symbol(sym.MCREARTABLA,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 161: break;
          case 77: 
            { return processSymbol(new Symbol(sym.MCLICKBOTON,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 162: break;
          case 78: 
            { return processSymbol(new Symbol(sym.MCREARIMAGEN,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 163: break;
          case 79: 
            { return processSymbol(new Symbol(sym.MCREARTEXTOA,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 164: break;
          case 80: 
            { return processSymbol(new Symbol(sym.MCREARTEXTOB,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 165: break;
          case 81: 
            { return processSymbol(new Symbol(sym.MCREARPARRAFO,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 166: break;
          case 82: 
            { return processSymbol(new Symbol(sym.MSETCONTENIDO,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 167: break;
          case 83: 
            { return processSymbol(new Symbol(sym.MGETCONTENIDO,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 168: break;
          case 84: 
            { return processSymbol(new Symbol(sym.MSETALINEACION,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 169: break;
          case 85: 
            { return processSymbol(new Symbol(sym.MGETALINEACION,yyline,yycolumn,yytext()));
            } 
            // fall through
          case 170: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
